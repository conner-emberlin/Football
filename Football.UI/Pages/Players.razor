@page "/Players/{id?}"
<PageTitle>Players</PageTitle>
<h4>Players</h4>

@using System.Text.Json
@using System.Text.Json.Serialization
@using Football.Models;
@inject IHttpClientFactory ClientFactory

<EditForm Model="player" OnValidSubmit="GetPlayers">
    <TextBoxName @bind-Value="this.Value" />
</EditForm>
<div style="height:10px;font-size:1px;">&nbsp;</div>
<div>
<button class="button-22" role="button" @onclick="AddPlayer">
    Add
</button>
</div>
<div style="height:10px;font-size:1px;">&nbsp;</div>
@if(add)
{
            <div class="table_container">
            <table class="boostrap4_table_head_dark_striped_rounded_with_shadow">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Position</th>
                        <th>Active</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            <input type="text" size="1" maxlength="25" class="form-control" @bind="@NewName" />
                        </td>
                        <td>
                            <input type="text" size="1" maxlength="2" class="form-control" @bind="@NewPosition" />
                        </td>
                        <td>
                            <input type="text" size="1" maxlength="1" class="form-control" @bind="@NewActive" />
                        </td>
                    </tr>
                </tbody>
            </table>
            </div>
        <div style="height:10px;font-size:1px;">&nbsp;</div>
        <button class="button-22" role="button" @onclick="CreatePlayer">
            Submit
        </button>
    <div style="height:10px;font-size:1px;">&nbsp;</div>
    @if(youTried && itWorked && recordsAdded > 0)
    {
        <text>Record added</text>
    }
    else if((youTried && !itWorked) || (youTried && itWorked && recordsAdded == 0))
    {
        <text>Something went wrong.</text>
    }

}
@if(!String.IsNullOrEmpty(player.Name) && !badRequestError && !add){
    var photoPath = "https://localhost:7176/PlayerPhotos/" + player.PlayerId + ".png";
 <div>
<b>Name</b> @player.Name <b>Position</b> @Position <b>Active</b> @Active
     <b>Fantasy </b>   <a href="/Fantasy/@player.PlayerId"><span class="oi oi-badge" aria-hidden="true"></span></a>
</div>
        <div>
        <img src="@photoPath" width="100" onerror="this.src = 'https://localhost:7176/PlayerPhotos/gen.png'">
        </div>
    <div style="height:10px;font-size:1px;">&nbsp;</div>
    @if (player.Position == "QB")
    {
        <div>
            <b>Passing Statistics</b>
            <a href="/ManageStats/passing/@player.PlayerId">&#9998</a>
        </div>
    }
    @if(player.PassingStats.Any())
    {
        <div class="table_container"> 
        <table class="boostrap4_table_head_dark_striped_rounded_with_shadow">
            <thead>
                <tr>
                    <th>Season</th>
                    <th>Team</th>
                    <th>Age</th>
                    <th>Games</th>
                    <th>Comps</th>
                    <th>Atts</th>
                    <th>Yds</th>
                    <th>Tds</th>
                    <th>Ints</th>
                    <th>Fds</th>
                    <th>Lng</th>
                    <th>Scks</th>
                    <th>SckYds</th>
                </tr>
            </thead>
            <tbody>
                @foreach(var stat in player.PassingStats)
                {
                    <tr>
                        <td>@stat.Season</td>
                        <td>@stat.Team</td>
                        <td>@stat.Age</td>
                        <td>@stat.Games</td>
                        <td>@stat.Completions</td>
                        <td>@stat.Attempts</td>
                        <td>@stat.Yards</td>
                        <td>@stat.Touchdowns</td>
                        <td>@stat.Interceptions</td>
                        <td>@stat.FirstDowns</td>
                        <td>@stat.Long</td>
                        <td>@stat.Sacks</td>
                        <td>@stat.SackYards</td>
                    </tr>
                }
            </tbody>
        </table>
        </div>
    }
    <div style="height:10px;font-size:1px;">&nbsp;</div>
    @if (player.Position == "QB" || player.Position == "RB")
    {
        <div>
            <b>Rushing Statistics</b>
            <a href="/ManageStats/rushing/@player.PlayerId">&#9998</a>
        </div>
    }
    @if (player.RushingStats.Count > 0)
    {
        <div class="table_container"> 
        <table class="boostrap4_table_head_dark_striped_rounded_with_shadow">
            <thead>
                <tr>
                    <th>Season</th>
                    <th>Team</th>
                    <th>Age</th>
                    <th>Games</th>
                    <th>Atts</th>
                    <th>Yds</th>
                    <th>Tds</th>
                    <th>Fds</th>
                    <th>Lng</th>
                    <th>Fmbls</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var stat in player.RushingStats)
                {
                    <tr>
                        <td>@stat.Season</td>
                        <td>@stat.Team</td>
                        <td>@stat.Age</td>
                        <td>@stat.Games</td>
                        <td>@stat.RushAttempts</td>
                        <td>@stat.Yards</td>
                        <td>@stat.Touchdowns</td>
                        <td>@stat.FirstDowns</td>
                        <td>@stat.Long</td>
                        <td>@stat.Fumbles</td>
                    </tr>
                }
            </tbody>
        </table>
        </div>
    }
    <div style="height:10px;font-size:1px;">&nbsp;</div>  
        @if(player.Position == "RB" || player.Position == "WR/TE")
        {
        <div>
        <b>Receiving Statistics</b>
        <a href="/ManageStats/receiving/@player.PlayerId">&#9998</a>
        </div>
        }
    @if (player.ReceivingStats.Count > 0)
    {

        <div class="table_container">
        <table class="boostrap4_table_head_dark_striped_rounded_with_shadow">
            <thead>
                <tr>
                    <th>Season</th>
                    <th>Team</th>
                    <th>Age</th>
                    <th>Games</th>
                    <th>Tgts</th>
                    <th>Rec</th>
                    <th>Yds</th>
                    <th>Tds</th>
                    <th>Fds</th>
                    <th>Lng</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var stat in player.ReceivingStats)
                {
                    <tr>
                        <td>@stat.Season</td>
                        <td>@stat.Team</td>
                        <td>@stat.Age</td>
                        <td>@stat.Games</td>
                        <td>@stat.Targets</td>
                        <td>@stat.Receptions</td>
                        <td>@stat.Yards</td>
                        <td>@stat.Touchdowns</td>
                        <td>@stat.FirstDowns</td>
                        <td>@stat.Long</td>
                    </tr>
                }
            </tbody>
        </table>
        </div>
    }

}

else if(badRequestError)
{
    <div>
        <p style="color:red">No players with that name</p>
    </div>
}

@code{
    [Parameter]
    public string id { get; set; } = "";

    private bool shouldRender;
    protected override bool ShouldRender() => shouldRender;
    private bool badRequestError;

    private string Value { get; set; } = "";
    private Player player = new();
    private string Active = "";
    private string Position = "";

    private bool add;
    public string NewName { get; set; } = "";
    public string NewPosition {get; set; } = "";
    public string NewActive { get; set; } = "";
    private bool itWorked = false;
    private bool youTried = false;
    private bool showFantasy = false;
    private int recordsAdded = 0;

    protected override async Task OnInitializedAsync()
    {
        if (!String.IsNullOrEmpty(id))
        {
            var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7028/api/Player/name/" + id );
            request.Headers.Add("Accept", "application/json");
            var client = ClientFactory.CreateClient();
            var response = await client.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                id = "";
                var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
                using var responseStream = await response.Content.ReadAsStreamAsync();
                this.Value = await JsonSerializer.DeserializeAsync<string>(responseStream, options);
                await GetPlayers();
            }           
        }
    }

    public async Task GetPlayers()
    {
        var id  = await GetPlayerId(this.Value);
        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7028/api/Player/" + id);
        request.Headers.Add("Accept", "application/json");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            badRequestError = false;
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            using var responseStream = await response.Content.ReadAsStreamAsync();
            player = await JsonSerializer.DeserializeAsync<Player>(responseStream, options);
            Active = player.Active == 1 ? "Yes" : "No";
            Position = player.Position == "WR/TE" && player.IsTightEnd ? "TE"
                        : player.Position == "WR/TE" && !player.IsTightEnd ? "WR"
                        : player.Position;
        }
        else
        {
            badRequestError = true;
        }
        shouldRender = true;
    }

    private async Task<int> GetPlayerId(string name)
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7028/api/Player/id/" + name);
        request.Headers.Add("Accept", "application/json");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            using var responseStream = await response.Content.ReadAsStreamAsync();
            return await JsonSerializer.DeserializeAsync<int>(responseStream, options);
        }
        else
        {
            return 0;
        }
    }
    private async Task CreatePlayer()
    {
        
        var request = new HttpRequestMessage(HttpMethod.Post, "https://localhost:7028/api/Player/create/" + NewName + "/" + NewPosition + "/" + NewActive);
        request.Headers.Add("Accept", "application/json");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            using var responseStream = await response.Content.ReadAsStreamAsync();
            recordsAdded = await JsonSerializer.DeserializeAsync<int>(responseStream, options);
            itWorked = true;
        }
        else
        {
            recordsAdded = 0;
            itWorked = false;
        }
        youTried = true;
    }

    private void AddPlayer()
    {
        add = true;
        shouldRender = true;
    }


}

