@page "/Players/{id?}"
<PageTitle>Players</PageTitle>
@using System.Text.Json
@using System.Text.Json.Serialization
@using Football.Fantasy.Models;
@using Football.Players.Models;
@using Football.Api.Models;
@using Football.UI.Helpers;

@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager

@if (!badRequestError && players.Any())
{
    <div class="autocomplete w-25">
        <input @bind=selectedPlayer @oninput=HandleInput class="form-control filter" placeholder="Player Name..."/>
        @if (filteredPlayers is not null)
        {
            <ul class="options">
                @if (filteredPlayers.Any())
                {
                    @foreach (var p in filteredPlayers)
                    {
                        <li class="option" @onclick=@(_ => SelectPlayer(p.PlayerId))>
                            <span class="option-text">@p.Name</span>
                        </li>
                    }
                }
                else
                {
                    <li class="disabled option">No results</li>
                }
            </ul>
        }
    </div>
}
else if (youTried && badRequestError)
{
    <p>Bad Request</p>
}

@if (loading)
{
    <div style="height:10px;font-size:1px;">&nbsp;</div>
    <div style="height:10px;font-size:1px;">&nbsp;</div>
    <div class="spinner"></div>
}
else if (!loading && !playerSelected)
{
    <div style="height:10px;font-size:1px;">&nbsp;</div>
    <div style="height:10px;font-size:1px;">&nbsp;</div>
    <button class="button-22" role="button" @onclick="@(()=>NavigationManager.NavigateTo("/ManagePlayers"))">
        Manage
    </button>
    <div style="height:10px;font-size:1px;">&nbsp;</div>
    <button class="button-22" role="button" @onclick="@(()=>NavigationManager.NavigateTo("/Injuries"))">
        Injuries
    </button>
}
@if(!playerSelected && showTrending && trendingPlayers.Any())
{
    <div style="height:10px;font-size:1px;">&nbsp;</div>
    <div style="height:10px;font-size:1px;">&nbsp;</div>
    <h5>Trending Players</h5>
    <div class="table_container">
        <table class="boostrap4_table_head_dark_striped_rounded_with_shadow">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Team</th>
                    <th>Position</th>
                    <th>Adds</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var t in trendingPlayers)
                {
                    var logoPhotoPath = t.PlayerTeam != null ?
                    "https://localhost:7176/Logos/" + t.PlayerTeam!.Team + ".png"
                    : "https://localhost:7176/Logos/nfl.png";

                    <tr>
                        <td>@t.Player.Name</td>
                        <td><img src="@logoPhotoPath" width="30" height="30"></td>
                        <td><b style="color:@form.PositionColor(t.Player.Position)">@t.Player.Position</b></td>
                        <td>@t.Adds</td>
                    </tr>
                }

            </tbody>
        </table>
    </div>

} 
<div style="height:10px;font-size:1px;">&nbsp;</div>
@if(playerSelected && playerId > 0)
{
    var photoPath = "https://localhost:7176/PlayerPhotos/" + playerId + ".png";
    <div>
        <img src="@photoPath" width="100" onerror="this.src = 'https://localhost:7176/PlayerPhotos/gen.png'">
    </div>
    <div>
       <b>@playerName</b> 
    </div>
    @if(!string.IsNullOrEmpty(team?.Team))
    {
        <div><b>@team.Team</b> <b>&#x2022;</b>  <b style="color:@form.PositionColor(@playerPosition)">@playerPosition</b> </div>
    }
    else
    {
        <div><b>@playerPosition</b> </div>
    }
    @if (runningTotal != null)
    {
        <div> <b style="color:@form.PositionColor(playerPosition)">@playerPosition</b> #@positionRank <b>&#x2022;</b> #@rank Overall <b>&#x2022;</b> Fpts: @runningTotal.FantasyPoints </div>
    }
    @if (schedule.Any())
    {
        <div class="parent">
            @foreach (var s in schedule)
            {
                var logoPhotoPath = "https://localhost:7176/Logos/" + s.OpposingTeam + ".png";
                <div class="child">
                        <div>Wk @s.Week vs @s.OpposingTeam </div>
                    <div style="text-align: center;">  <img src="@logoPhotoPath" width="30" height="30"></div>
                </div>
        }
        </div>
    }
    <div style="height:10px;font-size:1px;">&nbsp;</div>
    @if(playerPosition == "QB")
    {
        @if (weeklyData.Any())
        {
            <div class="table_container">
                <table class="boostrap4_table_head_dark_striped_rounded_with_shadow">
                    <thead>
                        <tr>
                            <th>Season</th>
                            <th>Week</th>
                            <th>Comp</th>
                            <th>Att</th>
                            <th>Yd</th>
                            <th>TD</th>
                            <th>Int</th>
                            <th>Sck</th>
                            <th>RAtt</th>
                            <th>RYds</th>
                            <th>RTd</th>
                            <th>Fum</th>
                            <th>Fpts</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var stat in weeklyData)
                        {
                            <tr>
                                <td>@stat.Season</td>
                                <td>@stat.Week</td>
                                <td>@stat.Completions</td>
                                <td>@stat.Attempts</td>
                                <td>@stat.PassingYards</td>
                                <td>@stat.PassingTouchdowns</td>
                                <td>@stat.Interceptions</td>
                                <td>@stat.Sacks</td>
                                <td>@stat.RushingAttempts</td>
                                <td>@stat.RushingYards</td>
                                <td>@stat.RushingTouchdowns</td>
                                <td>@stat.Fumbles</td>
                                <td>@Math.Round(weeklyFantasy.Where(s => s.Week == stat.Week).First().FantasyPoints, 2)</td>
                            </tr>
                        }
                        <tr>
                            <td><b>Total</b></td>
                            <td>-</td>
                            <td>@weeklyData.Sum(w => w.Completions)</td>
                            <td>@weeklyData.Sum(w => w.Attempts)</td>
                            <td>@weeklyData.Sum(w => w.PassingYards)</td>
                            <td>@weeklyData.Sum(w => w.PassingTouchdowns)</td>
                            <td>@weeklyData.Sum(w => w.Interceptions)</td>
                            <td>@weeklyData.Sum(w => w.Sacks)</td>
                            <td>@weeklyData.Sum(w => w.RushingAttempts)</td>
                            <td>@weeklyData.Sum(w => w.RushingYards)</td>
                            <td>@weeklyData.Sum(w => w.RushingTouchdowns)</td>
                            <td>@weeklyData.Sum(w => w.Fumbles)</td>
                            <td>@Math.Round(weeklyFantasy.Sum(w => w.FantasyPoints),2)</td>
                        </tr>
                        <tr>
                            <td><b>Avg</b></td>
                            <td>-</td>
                            <td>@Math.Round(weeklyData.Average(w => w.Completions))</td>
                            <td>@Math.Round(weeklyData.Average(w => w.Attempts) )</td>
                            <td>@Math.Round(weeklyData.Average(w => w.PassingYards) )</td>
                            <td>@Math.Round(weeklyData.Average(w => w.PassingTouchdowns) )</td>
                            <td>@Math.Round(weeklyData.Average(w => w.Interceptions))</td>
                            <td>@Math.Round(weeklyData.Average(w => w.Sacks))</td>
                            <td>@Math.Round(weeklyData.Average(w => w.RushingAttempts))</td>
                            <td>@Math.Round(weeklyData.Average(w => w.RushingYards))</td>
                            <td>@Math.Round(weeklyData.Average(w => w.RushingTouchdowns))</td>
                            <td>@Math.Round(weeklyData.Average(w => w.Fumbles))</td>
                            <td>@Math.Round(weeklyFantasy.Average(w => w.FantasyPoints), 2)</td>
                        </tr>
                        <tr>
                            <td><b>Pace</b></td>
                            <td>-</td>
                            <td>@Math.Round(weeklyData.Average(w => w.Completions)*17)</td>
                            <td>@Math.Round(weeklyData.Average(w => w.Attempts)*17)</td>
                            <td>@Math.Round(weeklyData.Average(w => w.PassingYards)*17)</td>
                            <td>@Math.Round(weeklyData.Average(w => w.PassingTouchdowns)*17)</td>
                            <td>@Math.Round(weeklyData.Average(w => w.Interceptions)*17)</td>
                            <td>@Math.Round(weeklyData.Average(w => w.Sacks)*17)</td>
                            <td>@Math.Round(weeklyData.Average(w => w.RushingAttempts)*17)</td>
                            <td>@Math.Round(weeklyData.Average(w => w.RushingYards)*17)</td>
                            <td>@Math.Round(weeklyData.Average(w => w.RushingTouchdowns)*17)</td>
                            <td>@Math.Round(weeklyData.Average(w => w.Fumbles)*17)</td>
                            <td>@Math.Round(weeklyFantasy.Average(w => w.FantasyPoints) * 17,2)</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        }
        @if (seasonData.Any())
        {
            <div class="table_container">
                <table class="boostrap4_table_head_dark_striped_rounded_with_shadow">
                    <thead>
                        <tr>
                            <th>Season</th>
                            <th>Games</th>
                            <th>Comp</th>
                            <th>Att</th>
                            <th>Yd</th>
                            <th>TD</th>
                            <th>Int</th>
                            <th>Sck</th>
                            <th>RAtt</th>
                            <th>RYds</th>
                            <th>RTd</th>
                            <th>Fum</th>
                            <th>Fpts</th>
                            <th>FPPG</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var stat in seasonData)
                        {
                            <tr>
                                <td>@stat.Season</td>
                                <td>@stat.Games</td>
                                <td>@stat.Completions</td>
                                <td>@stat.Attempts</td>
                                <td>@stat.PassingYards</td>
                                <td>@stat.PassingTouchdowns</td>
                                <td>@stat.Interceptions</td>
                                <td>@stat.Sacks</td>
                                <td>@stat.RushingAttempts</td>
                                <td>@stat.RushingYards</td>
                                <td>@stat.RushingTouchdowns</td>
                                <td>@stat.Fumbles</td>
                                <td>@seasonFantasy.Where(s => s.Season == stat.Season).First().FantasyPoints</td>
                                <td>@seasonFantasy.Where(s => s.Season == stat.Season).First().FPPG</td>
                            </tr>
                        }

                    </tbody>
            </table>
        </div>
        }
    }

    else if(playerPosition == "RB")
    {
        @if (weeklyData.Any())
        {
            <div class="table_container">
                <table class="boostrap4_table_head_dark_striped_rounded_with_shadow">
                    <thead>
                        <tr>
                            <th>Season</th>
                            <th>Week</th>
                            <th>Att</th>
                            <th>Yds</th>
                            <th>TD</th>
                            <th>Rec</th>
                            <th>Tgt</th>
                            <th>RecYds</th>
                            <th>RecTD</th>
                            <th>Fum</th>
                            <th>Fpts</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var stat in weeklyData)
                        {
                            <tr>
                                <td>@stat.Season</td>
                                <td>@stat.Week</td>
                                <td>@stat.RushingAttempts</td>
                                <td>@stat.RushingYards</td>
                                <td>@stat.RushingTouchdowns</td>
                                <td>@stat.Receptions</td>
                                <td>@stat.Targets</td>
                                <td>@stat.ReceivingYards</td>
                                <td>@stat.ReceivingTouchdowns</td>
                                <td>@stat.Fumbles</td>
                                <td>@Math.Round(weeklyFantasy.Where(s => s.Week == stat.Week).First().FantasyPoints, 2)</td>
                            </tr>
                        }
                        <tr>
                            <td><b>Total</b></td>
                            <td>-</td>
                            <td>@weeklyData.Sum(w => w.RushingAttempts)</td>
                            <td>@weeklyData.Sum(w => w.RushingYards)</td>
                            <td>@weeklyData.Sum(w => w.RushingTouchdowns)</td>
                            <td>@weeklyData.Sum(w => w.Receptions)</td>
                            <td>@weeklyData.Sum(w => w.Targets)</td>
                            <td>@weeklyData.Sum(w => w.ReceivingYards)</td>
                            <td>@weeklyData.Sum(w => w.ReceivingTouchdowns)</td>
                            <td>@weeklyData.Sum(w => w.Fumbles)</td>
                            <td>@Math.Round(weeklyFantasy.Sum(w => w.FantasyPoints),2)</td>
                        </tr>
                        <tr>
                            <td><b>Avg</b></td>
                            <td>-</td>
                            <td>@Math.Round(weeklyData.Average(w => w.RushingAttempts) )</td>
                            <td>@Math.Round(weeklyData.Average(w => w.RushingYards) )</td>
                            <td>@Math.Round(weeklyData.Average(w => w.RushingTouchdowns) )</td>
                            <td>@Math.Round(weeklyData.Average(w => w.Receptions))</td>
                            <td>@Math.Round(weeklyData.Average(w => w.Targets) )</td>
                            <td>@Math.Round(weeklyData.Average(w => w.ReceivingYards) )</td>
                            <td>@Math.Round(weeklyData.Average(w => w.ReceivingTouchdowns))</td>
                            <td>@Math.Round(weeklyData.Average(w => w.Fumbles) )</td>
                            <td>@Math.Round(weeklyFantasy.Average(w => w.FantasyPoints), 2)</td>
                        </tr>
                        <tr>
                            <td><b>Pace</b></td>
                            <td>-</td>
                            <td>@Math.Round(weeklyData.Average(w => w.RushingAttempts)*17)</td>
                            <td>@Math.Round(weeklyData.Average(w => w.RushingYards)*17)</td>
                            <td>@Math.Round(weeklyData.Average(w => w.RushingTouchdowns)*17)</td>
                            <td>@Math.Round(weeklyData.Average(w => w.Receptions)*17)</td>
                            <td>@Math.Round(weeklyData.Average(w => w.Targets)*17)</td>
                            <td>@Math.Round(weeklyData.Average(w => w.ReceivingYards)*17)</td>
                            <td>@Math.Round(weeklyData.Average(w => w.ReceivingTouchdowns)*17)</td>
                            <td>@Math.Round(weeklyData.Average(w => w.Fumbles)*17)</td>
                            <td>@Math.Round(weeklyFantasy.Average(w => w.FantasyPoints) * 17,2)</td>
                        </tr>
                    </tbody>
                </table>
            </div>             
        }
        @if (seasonData.Any())
        {
            <div class="table_container">
                <table class="boostrap4_table_head_dark_striped_rounded_with_shadow">
                    <thead>
                        <tr>
                            <th>Season</th>
                            <th>Games</th>
                            <th>Att</th>
                            <th>Yds</th>
                            <th>TD</th>
                            <th>Rec</th>
                            <th>Tgt</th>
                            <th>RecYds</th>
                            <th>RecTD</th>
                            <th>Fum</th>
                            <th>Fpts</th>
                            <th>FPPG</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var stat in seasonData)
                        {
                            <tr>
                                <td>@stat.Season</td>
                                <td>@stat.Games</td>
                                <td>@stat.RushingAttempts</td>
                                <td>@stat.RushingYards</td>
                                <td>@stat.RushingTouchdowns</td>
                                <td>@stat.Receptions</td>
                                <td>@stat.Targets</td>
                                <td>@stat.ReceivingYards</td>
                                <td>@stat.ReceivingTouchdowns</td>
                                <td>@stat.Fumbles</td>
                                <td>@seasonFantasy.Where(s => s.Season == stat.Season).First().FantasyPoints</td>
                                <td>@seasonFantasy.Where(s => s.Season == stat.Season).First().FPPG</td>
                            </tr>
                        }
                    </tbody>
            </table>
        </div>
        }
    }

    else if(playerPosition == "WR")
    {
        @if (weeklyData.Any())
        {
            <div class="table_container">
                <table class="boostrap4_table_head_dark_striped_rounded_with_shadow">
                    <thead>
                        <tr>
                            <th>Season</th>
                            <th>Week</th>
                            <th>Rec</th>
                            <th>Tgt</th>
                            <th>Yds</th>
                            <th>Lng</th>
                            <th>TD</th>
                            <th>RAtt</th>
                            <th>RYds</th>
                            <th>RTD</th>
                            <th>Fum</th>
                            <th>Fpts</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var stat in weeklyData)
                        {
                            <tr>
                                <td>@stat.Season</td>
                                <td>@stat.Week</td>
                                <td>@stat.Receptions</td>
                                <td>@stat.Targets</td>
                                <td>@stat.ReceivingYards</td>
                                <td>@stat.Long</td>
                                <td>@stat.ReceivingTouchdowns</td>
                                <td>@stat.RushingAttempts</td>
                                <td>@stat.RushingYards</td>
                                <td>@stat.RushingTouchdowns</td>
                                <td>@stat.Fumbles</td>
                                <td>@Math.Round(weeklyFantasy.Where(s => s.Week == stat.Week).First().FantasyPoints,2)</td>
                            </tr>
                        }
                        <tr>
                            <td><b>Total</b></td>
                            <td>-</td>
                            <td>@weeklyData.Sum(w => w.Receptions)</td>
                            <td>@weeklyData.Sum(w => w.Targets)</td>
                            <td>@weeklyData.Sum(w => w.ReceivingYards)</td>
                            <td>-</td>
                            <td>@weeklyData.Sum(w => w.ReceivingTouchdowns)</td>
                            <td>@weeklyData.Sum(w => w.RushingAttempts)</td>
                            <td>@weeklyData.Sum(w => w.RushingYards)</td>
                            <td>@weeklyData.Sum(w => w.RushingTouchdowns)</td>
                            <td>@weeklyData.Sum(w => w.Fumbles)</td>
                            <td>@Math.Round(weeklyFantasy.Sum(w => w.FantasyPoints),2)</td>
                        </tr>
                        <tr>
                            <td><b>Avg</b></td>
                            <td>-</td>
                            <td>@Math.Round(weeklyData.Average(w => w.Receptions) )</td>
                            <td>@Math.Round(weeklyData.Average(w => w.Targets))</td>
                            <td>@Math.Round(weeklyData.Average(w => w.ReceivingYards) )</td>
                            <td>-</td>
                            <td>@Math.Round(weeklyData.Average(w => w.ReceivingTouchdowns) )</td>
                            <td>@Math.Round(weeklyData.Average(w => w.RushingAttempts) )</td>
                            <td>@Math.Round(weeklyData.Average(w => w.RushingYards))</td>
                            <td>@Math.Round(weeklyData.Average(w => w.RushingTouchdowns) )</td>
                            <td>@Math.Round(weeklyData.Average(w => w.Fumbles) )</td>
                            <td>@Math.Round(weeklyFantasy.Average(w => w.FantasyPoints), 2)</td>
                        </tr>
                        <tr>
                            <td><b>Pace</b></td>
                            <td>-</td>
                            <td>@Math.Round(weeklyData.Average(w => w.Receptions)*17)</td>
                            <td>@Math.Round(weeklyData.Average(w => w.Targets)*17)</td>
                            <td>@Math.Round(weeklyData.Average(w => w.ReceivingYards)*17)</td>
                            <td>-</td>
                            <td>@Math.Round(weeklyData.Average(w => w.ReceivingTouchdowns)*17)</td>
                            <td>@Math.Round(weeklyData.Average(w => w.RushingAttempts)*17)</td>
                            <td>@Math.Round(weeklyData.Average(w => w.RushingYards)*17)</td>
                            <td>@Math.Round(weeklyData.Average(w => w.RushingTouchdowns)*17)</td>
                            <td>@Math.Round(weeklyData.Average(w => w.Fumbles)*17)</td>
                            <td>@Math.Round(weeklyFantasy.Average(w => w.FantasyPoints) * 17,2)</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        }
        @if (seasonData.Any())
        {
            <div class="table_container">
                <table class="boostrap4_table_head_dark_striped_rounded_with_shadow">
                    <thead>
                        <tr>
                            <th>Season</th>
                            <th>Games</th>
                            <th>Rec</th>
                            <th>Tgt</th>
                            <th>Yds</th>
                            <th>Lng</th>
                            <th>TD</th>
                            <th>RAtt</th>
                            <th>RYds</th>
                            <th>RTD</th>
                            <th>Fum</th>
                            <th>Fpts</th>
                            <th>FPPG</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var stat in seasonData)
                        {
                            <tr>
                                <td>@stat.Season</td>
                                <td>@stat.Games</td>
                                <td>@stat.Receptions</td>
                                <td>@stat.Targets</td>
                                <td>@stat.ReceivingYards</td>
                                <td>@stat.Long</td>
                                <td>@stat.ReceivingTouchdowns</td>
                                <td>@stat.RushingAttempts</td>
                                <td>@stat.RushingYards</td>
                                <td>@stat.RushingTouchdowns</td>
                                <td>@stat.Fumbles</td>
                                <td>@seasonFantasy.Where(s => s.Season == stat.Season).First().FantasyPoints</td>
                                <td>@seasonFantasy.Where(s => s.Season == stat.Season).First().FPPG</td>
                            </tr>
                        }
                    </tbody>
            </table>
        </div>
        }
    }

    else if(playerPosition == "TE")
    {
        @if (weeklyData.Any())
        {
            <div class="table_container">
                <table class="boostrap4_table_head_dark_striped_rounded_with_shadow">
                    <thead>
                        <tr>
                            <th>Season</th>
                            <th>Week</th>
                            <th>Rec</th>
                            <th>Tgt</th>
                            <th>Yds</th>
                            <th>Lng</th>
                            <th>TD</th>
                            <th>RAtt</th>
                            <th>RYds</th>
                            <th>RTD</th>
                            <th>Fum</th>
                            <th>Fpts</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var stat in weeklyData)
                        {
                            <tr>
                                <td>@stat.Season</td>
                                <td>@stat.Week</td>
                                <td>@stat.Receptions</td>
                                <td>@stat.Targets</td>
                                <td>@stat.ReceivingYards</td>
                                <td>@stat.Long</td>
                                <td>@stat.ReceivingTouchdowns</td>
                                <td>@stat.RushingAttempts</td>
                                <td>@stat.RushingYards</td>
                                <td>@stat.RushingTouchdowns</td>
                                <td>@stat.Fumbles</td>
                                <td>@Math.Round(weeklyFantasy.Where(s => s.Week == stat.Week).First().FantasyPoints,2)</td>
                            </tr>
                        }
                        <tr>
                            <td><b>Total</b></td>
                            <td>-</td>
                            <td>@weeklyData.Sum(w => w.Receptions)</td>
                            <td>@weeklyData.Sum(w => w.Targets)</td>
                            <td>@weeklyData.Sum(w => w.ReceivingYards)</td>
                            <td>-</td>
                            <td>@weeklyData.Sum(w => w.ReceivingTouchdowns)</td>
                            <td>@weeklyData.Sum(w => w.RushingAttempts)</td>
                            <td>@weeklyData.Sum(w => w.RushingYards)</td>
                            <td>@weeklyData.Sum(w => w.RushingTouchdowns)</td>
                            <td>@weeklyData.Sum(w => w.Fumbles)</td>
                            <td>@Math.Round(weeklyFantasy.Sum(w => w.FantasyPoints),2)</td>
                        </tr>
                        <tr>
                            <td><b>Avg</b></td>
                            <td>-</td>
                            <td>@Math.Round(weeklyData.Average(w => w.Receptions) )</td>
                            <td>@Math.Round(weeklyData.Average(w => w.Targets))</td>
                            <td>@Math.Round(weeklyData.Average(w => w.ReceivingYards))</td>
                            <td>-</td>
                            <td>@Math.Round(weeklyData.Average(w => w.ReceivingTouchdowns) )</td>
                            <td>@Math.Round(weeklyData.Average(w => w.RushingAttempts) )</td>
                            <td>@Math.Round(weeklyData.Average(w => w.RushingYards) )</td>
                            <td>@Math.Round(weeklyData.Average(w => w.RushingTouchdowns))</td>
                            <td>@Math.Round(weeklyData.Average(w => w.Fumbles) )</td>
                            <td>@Math.Round(weeklyFantasy.Average(w => w.FantasyPoints), 2)</td>
                        </tr>
                        <tr>
                            <td><b>Pace</b></td>
                            <td>-</td>
                            <td>@Math.Round(weeklyData.Average(w => w.Receptions)*17)</td>
                            <td>@Math.Round(weeklyData.Average(w => w.Targets)*17)</td>
                            <td>@Math.Round(weeklyData.Average(w => w.ReceivingYards)*17)</td>
                            <td>-</td>
                            <td>@Math.Round(weeklyData.Average(w => w.ReceivingTouchdowns)*17)</td>
                            <td>@Math.Round(weeklyData.Average(w => w.RushingAttempts)*17)</td>
                            <td>@Math.Round(weeklyData.Average(w => w.RushingYards)*17)</td>
                            <td>@Math.Round(weeklyData.Average(w => w.RushingTouchdowns)*17)</td>
                            <td>@Math.Round(weeklyData.Average(w => w.Fumbles)*17)</td>
                            <td>@Math.Round(weeklyFantasy.Average(w => w.FantasyPoints) * 17,2)</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        }
        @if (seasonData.Any())
        {
            <div class="table_container">
                <table class="boostrap4_table_head_dark_striped_rounded_with_shadow">
                    <thead>
                        <tr>
                            <th>Season</th>
                            <th>Games</th>
                            <th>Rec</th>
                            <th>Tgt</th>
                            <th>Yds</th>
                            <th>Lng</th>
                            <th>TD</th>
                            <th>RAtt</th>
                            <th>RYds</th>
                            <th>RTD</th>
                            <th>Fum</th>
                            <th>Fpts</th>
                            <th>FPPG</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var stat in seasonData)
                        {
                            <tr>
                                <td>@stat.Season</td>
                                <td>@stat.Games</td>
                                <td>@stat.Receptions</td>
                                <td>@stat.Targets</td>
                                <td>@stat.ReceivingYards</td>
                                <td>@stat.Long</td>
                                <td>@stat.ReceivingTouchdowns</td>
                                <td>@stat.RushingAttempts</td>
                                <td>@stat.RushingYards</td>
                                <td>@stat.RushingTouchdowns</td>
                                <td>@stat.Fumbles</td>
                                <td>@seasonFantasy.Where(s => s.Season == stat.Season).First().FantasyPoints</td>
                                <td>@seasonFantasy.Where(s => s.Season == stat.Season).First().FPPG</td>
                            </tr>
                        }
                    </tbody>
            </table>
        </div>
        }
    }
    else if (playerPosition == "DST")
    {
        @if (weeklyData.Any())
        {
            <div class="table_container">
                <table class="boostrap4_table_head_dark_striped_rounded_with_shadow">
                    <thead>
                        <tr>
                            <th>Season</th>
                            <th>Week</th>
                            <th>Sacks</th>
                            <th>Ints</th>
                            <th>FumRecvd</th>
                            <th>ForcedFum</th>
                            <th>DefTD</th>
                            <th>Safety</th>
                            <th>SpecTD</th>
                            <th>Fpts</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var stat in weeklyData)
                        {
                            <tr>
                                <td>@stat.Season</td>
                                <td>@stat.Week</td>
                                <td>@stat.Sacks</td>
                                <td>@stat.DefensiveInterceptions</td>
                                <td>@stat.FumblesRecovered</td>
                                <td>@stat.ForcedFumbles</td>
                                <td>@stat.DefensiveTouchdowns</td>
                                <td>@stat.DefensiveSafties</td>
                                <td>@stat.SpecialTeamsTouchdowns</td>
                                <td>@Math.Round(weeklyFantasy.Where(s => s.Week == stat.Week).First().FantasyPoints,2)</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        @if (seasonData.Any())
        {
            <div class="table_container">
                <table class="boostrap4_table_head_dark_striped_rounded_with_shadow">
                    <thead>
                        <tr>
                            <th>Season</th>
                            <th>Games</th>
                            <th>Sacks</th>
                            <th>Ints</th>
                            <th>FumRecvd</th>
                            <th>ForcedFum</th>
                            <th>DefTD</th>
                            <th>Safety</th>
                            <th>SpecTD</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var stat in seasonData)
                        {
                            <tr>
                                <td>@stat.Season</td>
                                <td>@stat.Games</td>
                                <td>@stat.Sacks</td>
                                <td>@stat.DefensiveInterceptions</td>
                                <td>@stat.FumblesRecovered</td>
                                <td>@stat.ForcedFumbles</td>
                                <td>@stat.DefensiveTouchdowns</td>
                                <td>@stat.DefensiveSafties</td>
                                <td>@stat.SpecialTeamsTouchdowns</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    }
    else if(playerPosition == "K")
    {
        @if (weeklyData.Count > 0)
        {
            <div class="table_container">
                <table class="boostrap4_table_head_dark_striped_rounded_with_shadow">
                    <thead>
                        <tr>
                            <th>Season</th>
                            <th>Week</th>
                            <th>FG</th>
                            <th>FGA</th>
                            <th>1-19</th>
                            <th>20-29</th>
                            <th>30-39</th>
                            <th>40-49</th>
                            <th>50+</th>
                            <th>XP</th>
                            <th>XPA</th>
                            <th>Fpts</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var stat in weeklyData)
                        {
                            <tr>
                                <td>@stat.Season</td>
                                <td>@stat.Week</td>
                                <td>@stat.FieldGoals</td>
                                <td>@stat.FieldGoalAttempts</td>
                                <td>@stat.OneNineteen</td>
                                <td>@stat.TwentyTwentyNine</td>
                                <td>@stat.ThirtyThirtyNine</td>
                                <td>@stat.FourtyFourtyNine</td>
                                <td>@stat.Fifty</td>
                                <td>@stat.ExtraPoints</td>
                                <td>@stat.ExtraPointAttempts</td>
                                <td>@Math.Round(weeklyFantasy.Where(s => s.Week == stat.Week).First().FantasyPoints, 2)</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    }
}
 
@code{
    [Parameter]
    public string id { get; set; } = "";

    JsonSerializerOptions options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };

    private bool shouldRender;
    protected override bool ShouldRender() => shouldRender;
    private bool badRequestError = false;
    private bool youTried = false;

    private bool playerSelected = false;
    public List<Player>? players { get; set; } = new();

    public List<Player>? filteredPlayers { get; set; }
    public string selectedPlayer { get; set; } = "";

    public string? playerName { get; set; }
    public int playerId { get; set; }
    public string playerPosition { get; set; } = "";

    List<SeasonDataModel> seasonData { get; set; } = new();
    List<WeeklyDataModel> weeklyData { get; set; } = new();
    List<FantasyPPG>? seasonFantasy {get; set;} = new();  
    List<WeeklyFantasy>? weeklyFantasy { get; set; } = new();
    SeasonFantasy? runningTotal { get; set; } = new();


    public int rank { get; set; }
    public int positionRank { get; set; }

    public PlayerTeam? team = new();

    public List<Schedule> schedule { get; set; } = new();

    public bool showTrending { get; set; } = false;
    public List<TrendingPlayer>? trendingPlayers { get; set; } = new();

    public bool loading { get; set; }

    public Formatter form = new();

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        shouldRender = true;

        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7028/api/Player/data/players");
        request.Headers.Add("Accept", "application/json");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            players = await JsonSerializer.DeserializeAsync<List<Player>>(responseStream, options);
            players = players.OrderByDescending(p => p.Active).ThenBy(p => p.Name).ToList();
            badRequestError = false;
            youTried = true;

            if(!String.IsNullOrEmpty(id))
            {
                SelectPlayer(int.Parse(id));
                id = "";
            }
            else
            {
                showTrending = true;
                await GetTrendingPlayers();

            }
        }
        else
        {
            badRequestError = true;
            youTried = true;
        }
        loading = false;
        shouldRender = true;
    }
    private void HandleInput(ChangeEventArgs e)
    {
        var filter = e.Value?.ToString();
        if(filter?.Length > 2)
        {
            filteredPlayers = players.Where(p => p.Name.ToLower().Contains(filter.ToLower())).ToList();
        }
        else 
        {
            filteredPlayers = null;
        }
    }

    private async void SelectPlayer(int pid)
    {
        loading = true;
        showTrending = false;
        playerSelected = false;
        selectedPlayer = "";
        playerId = pid;
        playerPosition = players.Where(p => p.PlayerId == pid).First().Position;
        playerName = players.Where(p => p.PlayerId == pid).First().Name;

        seasonData.Clear();
        weeklyData.Clear();

        await GetWeeklyData();
        await GetSeasonData();
        await GetFantasySeasonData();
        await GetFantasyWeeklyData();
        await GetPlayerTeam();
        await GetUpcomingGames();
        await GetRunningFantasyTotals();

        playerSelected = true;
        selectedPlayer = playerName;
        filteredPlayers = null;
        loading = false;

        StateHasChanged();

    }

    #region API Requests
    private async Task GetSeasonData()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7028/api/Player/season-data/" + playerId.ToString());
        request.Headers.Add("Accept", "application/json");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            seasonData = (await JsonSerializer.DeserializeAsync<List<SeasonDataModel>>(responseStream, options)).OrderByDescending(s => s.Season).ToList();
        }
    }
    private async Task GetWeeklyData()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7028/api/Player/weekly-data/" + playerId.ToString());
        request.Headers.Add("Accept", "application/json");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            weeklyData = (await JsonSerializer.DeserializeAsync<List<WeeklyDataModel>>(responseStream, options)).OrderBy(d => d.Week).ToList();
        }
    }

    private async Task GetFantasySeasonData()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7028/api/Fantasy/data/season/" + playerId.ToString());
        request.Headers.Add("Accept", "application/json");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            seasonFantasy = await JsonSerializer.DeserializeAsync<List<FantasyPPG>>(responseStream, options);
            if (seasonFantasy.Any())
            {
                foreach (var s in seasonFantasy)
                {
                    s.FantasyPoints = Math.Round(s.FantasyPoints, 2);
                    s.FPPG = Math.Round(s.FantasyPoints / s.Games, 2);
                }
            }
        }
        else
        {
            badRequestError = true;
        }
    }

    private async Task GetFantasyWeeklyData()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7028/api/Fantasy/data/weekly/" + playerId.ToString());
        request.Headers.Add("Accept", "application/json");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            weeklyFantasy = await JsonSerializer.DeserializeAsync<List<WeeklyFantasy>>(responseStream, options);
            if (seasonFantasy.Any())
            {
                foreach (var s in seasonFantasy)
                {
                    s.FantasyPoints = Math.Round(s.FantasyPoints, 2);
                }
            }
        }
    }

    private async Task GetPlayerTeam()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7028/api/Player/team/" + playerId.ToString());
        request.Headers.Add("Accept", "application/json");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode && response.StatusCode != System.Net.HttpStatusCode.NoContent)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            team = await JsonSerializer.DeserializeAsync<PlayerTeam>(responseStream, options);
        }
    }

    private async Task GetUpcomingGames()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7028/api/Player/schedule/" + playerId.ToString());
        request.Headers.Add("Accept", "application/json");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            schedule = (await JsonSerializer.DeserializeAsync<List<Schedule>>(responseStream, options)).Take(5).ToList();
        }
    }

    private async Task GetRunningFantasyTotals()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7028/api/Fantasy/season-totals");
        request.Headers.Add("Accept", "application/json");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            var list = await JsonSerializer.DeserializeAsync<List<SeasonFantasy>>(responseStream, options);
            runningTotal = list.Where(l => l.PlayerId == playerId).FirstOrDefault();
            rank = list.Select(l => l.PlayerId).ToList().IndexOf(playerId) + 1;
            positionRank = list.Where(l => l.Position == playerPosition).Select(l => l.PlayerId).ToList().IndexOf(playerId) + 1;
        }
    }

    private async Task GetTrendingPlayers()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7028/api/player/trending-players");
        request.Headers.Add("Accept", "application/json");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            trendingPlayers = await JsonSerializer.DeserializeAsync<List<TrendingPlayer>>(responseStream, options);
        }
    }


    #endregion

    public class FantasyPPG : SeasonFantasy
    {
        public double FPPG { get; set; }
    }


}

