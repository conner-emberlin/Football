@page "/StartOrSit"
<PageTitle>Start Or Sit</PageTitle>

@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Text;
@using Football.Players.Models;
@using Football.Enums;
@using Football.Api.Models;
@using Football.UI.Helpers;
@inject IHttpClientFactory ClientFactory

<h4>Start or Sit Assistant</h4>

<EditForm model="this" OnSubmit="Get">
    <TextBoxName @bind-Value="this.Name1" />
    <TextBoxName @bind-Value="this.Name2" />
    <TextBoxName @bind-Value="this.Name3" />
    <button class="button-22" type="submit">Submit</button>
</EditForm>
<div style="height:10px;font-size:1px;">&nbsp;</div>

@if (loading)
{
    <div class="spinner"></div>
}
<div style="height:10px;font-size:1px;">&nbsp;</div>
@if (StartOrSits.Any()  && !loading){

    <div class="table_container">
        <table class="boostrap4_table_head_dark_striped_rounded_with_shadow">
            <thead>
                <tr>
                    <th>&nbsp;&nbsp;&nbsp;&nbsp;</th>
                    @foreach (var sos in StartOrSits)
                    {
                        <th>@sos.Name (@sos.Position)</th>
                    }
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Team</td>
                    @foreach (var sos in StartOrSits)
                    {
                        if(!string.IsNullOrEmpty(sos.Team)){
                            var imgPath = "https://localhost:7176/Logos/" + sos.Team + ".png";
                            <td><img src="@imgPath" width="30" height="30"></td>
                        }
                        else
                        {
                            <td>-</td>
                        }
                    }
                </tr>
                <tr>
                    <td>Opponent</td>
                    @foreach (var sos in StartOrSits)
                    {
                        if (sos.OpponentTeamId == 0)
                        {
                            <td>BYE</td>
                        }
                        else
                        {
                            <td> @string.Format("{0} {1}", sos.AtIndicator, sos.OpponentTeam) <b><text style="@formatter.FormatMatchupRank(sos.MatchupRanking)">(@sos.MatchupRanking.ToString())</text></b></td>
                        }
                    }
                </tr>
                <tr>
                    <td>Betting</td>
                    @foreach (var sos in StartOrSits)
                    {
                        <td>
                            <p>
                                OU: @sos.OverUnder
                                <br>
                                Line: @sos.Line
                                <br>
                                Implied Total: @sos.ImpliedTeamTotal
                            </p>

                        </td>
                    }
                </tr>
                <tr>
                    <td>Match</td>
                    @foreach (var sos in StartOrSits)
                    {
                        <td>
                            <p>
                                Date: @sos.GameTime
                                <br>
                                @if (!string.IsNullOrEmpty(sos.Temperature))
                                {
                                    <text>@sos.Temperature</text>
                                    <br>
                                }
                                @if (!string.IsNullOrEmpty(sos.Wind))
                                {
                                    <text>@sos.Wind</text>
                                    <br>
                                }
                                @if (!string.IsNullOrEmpty(sos.Condition))
                                {
                                    <text>@sos.Condition </text> <img src="@sos.ConditionURL" width="30" height="30">
                                }
                            </p>
                        </td>
                    }
                </tr>
                <tr>
                    <td>Projected Points</td>
                    @foreach (var sos in StartOrSits)
                    {
                        if (sos.ProjectedPoints > 0)
                        {
                            <td>@sos.ProjectedPoints</td>
                        }
                        else
                        {
                            <td>-</td>
                        }
                    }
                </tr>
                <tr>
                    <td>Player Comparisons</td>
                    @foreach (var sos in StartOrSits)
                    {
                        <td>
                            @foreach (var comp in sos.PlayerComparisons)
                            {
                                var diff = Math.Round(@comp.ProjectedPoints - @comp.FantasyPoints, 2);
                                diff *= -1;
                                <text>
                                    @comp.Name <b>vs</b> @sos.OpponentTeam:
                                    Proj: @Math.Round(comp.ProjectedPoints, 2)
                                    Actual: @Math.Round(comp.FantasyPoints, 2)
                                    Diff: <b><text style="@formatter.GetDiffColor(diff)">@Math.Round(diff, 2)</text></b>
                                </text>
                                <br>
                            }
                        </td>
                    }
                </tr>
                <tr>
                <td>Start/Sit</td>
                    @foreach (var sos in StartOrSits)
                    {
                        <td><b><text style="@formatter.GetStartColor(sos.Start)">@formatter.StartFormat(sos.Start)</text></b></td>
                    }
                </tr>
            </tbody>
        </table>
    </div>
}

else if (badRequestError){
<text>Unexpected error. Please try again.</text>
}

@code {
    public List<Player>? AllPlayers { get; set; } = new();

    public bool badRequestError;
    public bool youTried;

    public string? Name1 { get; set; } = "";
    public string? Name2 { get; set; } = "";
    public string? Name3 { get; set; } = "";

    public Player? Player1 { get; set; } = new();
    public Player? Player2 { get; set; } = new();
    public Player? Player3 { get; set; } = new();


    public List<Player> Players { get; set; } = new();

    public bool loading { get; set; } = false;
    private bool shouldRender;

    public List<StartOrSitModel>? StartOrSits { get; set; } = new();

    private Formatter formatter = new();

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        await GetAllPlayers();
    }

    private async Task Get()
    {
        loading = true;
        badRequestError = false;
        Players.Clear();
        if (StartOrSits.Any()) StartOrSits.Clear();
        shouldRender = true;
        SetPlayers();


        var ids = Players.Select(p => p.PlayerId).ToList();
        var json = JsonSerializer.Serialize(ids);
        var content = new StringContent(json, Encoding.UTF8, "application/json");
        var client = ClientFactory.CreateClient();
        var request = new HttpRequestMessage(HttpMethod.Post, "https://localhost:7028/api/fantasy/start-or-sit") {Content = content};
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            using var responseStream = response.Content.ReadAsStream();
            StartOrSits = JsonSerializer.Deserialize<List<StartOrSitModel>>(responseStream, options);
        }
        loading = false;
        shouldRender = true;
    }

    private void SetPlayers()
    {
        if (AllPlayers.Any())
        {
            if (!string.IsNullOrEmpty(Name1))
            {
                Player1 = AllPlayers.FirstOrDefault(p => p.Name.ToLower().Contains(Name1.ToLower().Trim()));
                if (Player1 is not null)
                {
                    Players.Add(Player1);
                    Name1 = Player1.Name;
                }
                else Name1 = string.Empty;
            }
            if (!string.IsNullOrEmpty(Name2))
            {
                Player2 = AllPlayers.FirstOrDefault(p => p.Name.ToLower().Contains(Name2.ToLower().Trim()));
                if (Player2 is not null)
                {
                    Players.Add(Player2);
                    Name2 = Player2.Name;
                }
                else Name2 = string.Empty;
            }
            if (!string.IsNullOrEmpty(Name3))
            {
                Player3 = AllPlayers.FirstOrDefault(p => p.Name.ToLower().Contains(Name3.ToLower().Trim()));
                if (Player3 is not null)
                {
                    Players.Add(Player3);
                    Name3 = Player3.Name;
                }
                else Name3 = string.Empty;
            }
            shouldRender = true;
        }
    }

    private async Task GetAllPlayers()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7028/api/Player/data/players?active=1");
        request.Headers.Add("Accept", "application/json");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            using var responseStream = await response.Content.ReadAsStreamAsync();
            AllPlayers = await JsonSerializer.DeserializeAsync<List<Player>>(responseStream, options);
            AllPlayers = AllPlayers.OrderByDescending(p => p.Active).ThenBy(p => p.Name).ToList();
        }
    }

}
