@page "/WeeklyProjections"
<PageTitle>Weekly Projections</PageTitle>
@using System.Text.Json
@using System.Text.Json.Serialization
@using Football.Projections.Models;
@using Football.Players.Models;
@inject IHttpClientFactory ClientFactory

<h4>Weekly Projections</h4>
<div>
    @foreach (var position in Positions)
    {

        <input type="radio" name="players" id=" @position" value="@position"
        @onchange="SetPosition"
               checked=@(Position.Equals(position,StringComparison.OrdinalIgnoreCase)) />
        <label for="@position ">@position</label>

    }
</div>
<div style="height:10px;font-size:1px;">&nbsp;</div>
<button class="button-22" role="button" @onclick="CalculateProjections">
    Submit
</button>

<div style="height:10px;font-size:1px;">&nbsp;</div>

@if (loading)
{
    <div class="spinner"></div>
}
@if (badRequestError || players is null)
{
    <p>Unexpected Error. Please try again.</p>
}

else if (players.Count > 0)
{
    <button class="button-22" role="button" @onclick="UploadProjections">
        Upload
    </button>
    @if (count > 0)
    {
        <p>@count records added </p>
        count = 0;
    }
    <div style="height:10px;font-size:1px;">&nbsp;</div>
    <div class="table_container">
        <table class="boostrap4_table_head_dark_striped_rounded_with_shadow">
            <thead>
                <tr>
                    <th>Week</th>
                    <th>Rank</th>
                    <th>Name</th>
                    <th>Team</th>
                    <th>Position</th>
                    <th>Points</th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 1; i <= players.Count; i++)
                {
                    var logoPhotoPath = players.ElementAt(i - 1).Team != null ? "https://localhost:7176/Logos/" + players.ElementAt(i - 1).Team + ".png" : "https://localhost:7176/Logos/nfl.png";
                    <tr>
                        <td>@players.ElementAt(i-1).Week</td>
                        <td>@i</td>
                        <td><a class="page-links" href="Players/@players.ElementAt(i-1).PlayerId"> @players.ElementAt(i-1).Name</a></td>
                        <td><img src="@logoPhotoPath" width="30" height="30"></td>
                        <td>@players.ElementAt(i-1).Position</td>
                        <td>@Math.Round((double)players.ElementAt(i-1).ProjectedPoints,2)</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
@code {
    private bool shouldRender;
    protected override bool ShouldRender() => shouldRender;
    private bool badRequestError;
    private List<WeekProjectionWithTeam> players = new();
    private List<string> Positions = new() { "Quarterback", "Runningback", "Wide Receiver", "Tight End", "Flex" };
    public string Position { get; set; } = "Quarterback";
    public string PositionEnum { get; set; } = "1";
    private bool loading { get; set; }
    int count = 0;

    public async Task UploadProjections()
    {
        var request = new HttpRequestMessage(HttpMethod.Post, "https://localhost:7028/api/Projection/weekly/" + @PositionEnum);
        request.Headers.Add("Accept", "application/json");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            using var responseStream = await response.Content.ReadAsStreamAsync();
            count = await JsonSerializer.DeserializeAsync<int>(responseStream, options);

        }
    }
    public void SetPosition(ChangeEventArgs args)
    {
        Position = args.Value.ToString();
    }

    public async Task CalculateProjections()
    {
        loading = true;
        shouldRender = true;
        players.Clear();
        switch (Position.ToLower())
        {
            case "quarterback":
                PositionEnum = "QB";
                break;
            case "runningback":
                PositionEnum = "RB";
                break;
            case "wide receiver":
                PositionEnum = "WR";
                break;
            case "tight end":
                PositionEnum = "TE";
                break;
            case "flex":
                PositionEnum = "FLEX";
                break;
            default: PositionEnum = "QB"; break;
        }
        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7028/api/Projection/weekly/" + @PositionEnum);
        request.Headers.Add("Accept", "application/json");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            using var responseStream = await response.Content.ReadAsStreamAsync();
            players = await JsonSerializer.DeserializeAsync<List<WeekProjectionWithTeam>>(responseStream, options);
            foreach(var p in players)
            {
                p.Team = await GetPlayerTeam(p.PlayerId);
            }
            badRequestError = false;
        }
        else
        {
            badRequestError = true;
        }
        loading = false;
        shouldRender = true;
    }

    public async Task<string> GetPlayerTeam(int playerId)
    {
        PlayerTeam teamInfo = new();
        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7028/api/Player/team/" + playerId);
        request.Headers.Add("Accept", "application/json");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode && response.StatusCode != System.Net.HttpStatusCode.NoContent)
        {
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            using var responseStream = await response.Content.ReadAsStreamAsync();
            teamInfo = await JsonSerializer.DeserializeAsync<PlayerTeam>(responseStream, options);               
        }
        return teamInfo != null ? teamInfo.Team : "";
    }

    public class WeekProjectionWithTeam : WeekProjection
    {
        public string Team { get; set; } = "";
    }
}


