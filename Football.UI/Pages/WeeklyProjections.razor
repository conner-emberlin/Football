@page "/WeeklyProjections"
<PageTitle>Weekly Projections</PageTitle>
@using System.Text.Json
@using System.Text.Json.Serialization
@using Football.Api.Models;
@using Football.Projections.Models;
@using Football.Players.Models;
@inject IHttpClientFactory ClientFactory

<h4>Weekly Projections</h4>
<div>
    @foreach (var position in Positions)
    {

        <input type="radio" name="players" id=" @position" value="@position"
        @onchange="SetPosition"
               checked=@(Position.Equals(position,StringComparison.OrdinalIgnoreCase)) />
        <label for="@position ">@position</label>

    }
</div>
<div style="height:10px;font-size:1px;">&nbsp;</div>
<button class="button-22" role="button" @onclick="CalculateProjections">
    Submit
</button>

<div style="height:10px;font-size:1px;">&nbsp;</div>

@if (loading)
{
    <div class="spinner"></div>
}
@if (badRequestError || players is null)
{
    <p>Unexpected Error. Please try again.</p>
}

else if (players.Count > 0)
{
    <button class="button-22" role="button" @onclick="UploadProjections">
        Upload
    </button>
    @if (count > 0)
    {
        <p>@count records added </p>
        count = 0;
    }
    @if (recordDeleted)
    {
        <text>Record deleted.</text>
    }
    <div style="height:10px;font-size:1px;">&nbsp;</div>
    <div style="height:10px;font-size:1px;">&nbsp;</div>
    <h5>Week @players.First().Week</h5>
    <div class="table_container">
        <table class="boostrap4_table_head_dark_striped_rounded_with_shadow">
            <thead>
                <tr>
                    <th></th>
                    <th>Name</th>
                    <th>Team</th>
                    <th>Opponent</th>
                    <th>Points</th>
                    @if (players.First().CanDelete)
                    {
                        <th></th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var player in players)
                {
                    var logoPhotoPath = player.Team != null ? "https://localhost:7176/Logos/" + player.Team + ".png" : "https://localhost:7176/Logos/nfl.png";
                    var opponentPhotoPath = !string.IsNullOrEmpty(player.Opponent) ? "https://localhost:7176/Logos/" + player.Opponent + ".png" : "https://localhost:7176/Logos/nfl.png";
                    <tr>
                        <td>@GetRank(player)</td>
                        <td><a class="page-links" href="Players/@player.PlayerId"> @player.Name</a></td>
                        <td><img src="@logoPhotoPath" width="30" height="30"></td>                        
                        <td><img src="@opponentPhotoPath" width="30" height="30"></td>
                        <td>@Math.Round((double)player.ProjectedPoints,2)</td>
                        @if (player.CanDelete)
                        {
                            <td>
                                <button type="button" style="color:red" class="btn btn-link" @onclick="() => DeleteProjection(player.PlayerId, player.Season, player.Week)">
                                    <i sytle="color:red" class="oi oi-x" />
                                </button>
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
@code {
    JsonSerializerOptions options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };

    private bool shouldRender;
    protected override bool ShouldRender() => shouldRender;
    private bool badRequestError;
    private List<WeekProjectionModelWithOpp> players = new();
    private List<string> Positions = new() { "Quarterback", "Runningback", "Wide Receiver", "Tight End", "DST", "Kicker", "Flex" };
    public string Position { get; set; } = "Quarterback";
    public string PositionEnum { get; set; } = "1";
    private bool loading { get; set; }
    int count = 0;
    private bool recordDeleted = false;

    public async Task UploadProjections()
    {
        var request = new HttpRequestMessage(HttpMethod.Post, "https://localhost:7028/api/Projection/weekly/" + @PositionEnum);
        request.Headers.Add("Accept", "application/json");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            count = await JsonSerializer.DeserializeAsync<int>(responseStream, options);

        }
    }
    public void SetPosition(ChangeEventArgs args)
    {
        Position = args.Value.ToString();
        recordDeleted = false;
        players.Clear();
    }

    public async Task CalculateProjections()
    {
        loading = true;
        shouldRender = true;
        players.Clear();
        switch (Position.ToLower())
        {
            case "quarterback":
                PositionEnum = "QB";
                break;
            case "runningback":
                PositionEnum = "RB";
                break;
            case "wide receiver":
                PositionEnum = "WR";
                break;
            case "tight end":
                PositionEnum = "TE";
                break;
            case "dst":
                PositionEnum = "DST";
                break;
            case "kicker":
                PositionEnum = "K";
                break;
            case "flex":
                PositionEnum = "FLEX";
                break;
            default: PositionEnum = "QB"; break;
        }
        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7028/api/Projection/weekly/" + @PositionEnum);
        request.Headers.Add("Accept", "application/json");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            players = await JsonSerializer.DeserializeAsync<List<WeekProjectionModelWithOpp>>(responseStream, options);
            foreach(var p in players)
            {
                p.Opponent = await GetOpponent(p.PlayerId, p.Week);
            }
            players = players.OrderByDescending(p => p.ProjectedPoints).Where(p => p.ProjectedPoints > 0).ToList();
            badRequestError = false;
        }
        else
        {
            badRequestError = true;
        }
        loading = false;
        shouldRender = true;
    }

    public async Task<string> GetOpponent(int playerId, int week)
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7028/api/Player/schedule/" + playerId.ToString());
        request.Headers.Add("Accept", "application/json");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            var schedule = (await JsonSerializer.DeserializeAsync<List<Schedule>>(responseStream, options)).FirstOrDefault(s => s.Week == week);
            return schedule != null ? schedule.OpposingTeam : string.Empty;
        }
        else return string.Empty;
    }

    public async Task DeleteProjection(int playerId, int season, int week)
    {
        var url = string.Format("{0}/{1}/{2}/{3}", "https://localhost:7028/api/Projection/weekly", playerId, season, week);
        var request = new HttpRequestMessage(HttpMethod.Delete, url);
        request.Headers.Add("Accept", "application/json");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            recordDeleted =  await JsonSerializer.DeserializeAsync<bool>(responseStream, options);
            await CalculateProjections();
        }
        else
        {
            badRequestError = true;           
        }
        shouldRender = true;
    }


    public class WeekProjectionModelWithOpp : WeekProjectionModel
    {
        public string Opponent { get; set; } = "";
    }

    private string GetHeader() => players.Any() ? "Week " + players.First().Week + " Projections" : string.Empty;

    private int GetRank(WeekProjectionModelWithOpp projection) => players.IndexOf(projection) + 1;

}


