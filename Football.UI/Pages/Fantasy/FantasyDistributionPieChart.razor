@page "/dist-graph/{position}/{id}"
<PageTitle>Fantasy Distribution</PageTitle>

@using Football.UI.Interfaces;
@using Football.Api.Models.Fantasy;

@using ApexCharts;

@inject IFantasyService fantasyService;


@if (loading)
{
    <div class="spinner"></div>
}
else{
<h4>@Title()</h4>
}

<div style="height:10px;font-size:1px;">&nbsp;</div>
<div style="height:10px;font-size:1px;">&nbsp;</div>
<div style="height:10px;font-size:1px;">&nbsp;</div>

@if (playerPercentage != null && youTried && distributions.Any())
{
    <ApexChart TItem="Distribution"
               Height="500">

        <ApexPointSeries TItem="Distribution"
                         Items="distributions"
                         Name="Fantasy Distribution"
                         SeriesType="SeriesType.Pie"
                         XValue="@(e => e.Label)"
                         YAggregate="@(e => e.Sum(e => e.Value))"                        
                         />
    </ApexChart>

}

@code {

    [Parameter]
    public string id { get; set; } = "";
    [Parameter]
    public string position { get; set; } = "";

    private string name { get; set; } = "";

    private List<FantasyPercentageModel>? fantasyPercentages = new();
    private FantasyPercentageModel? playerPercentage = new();
    private List<Distribution> distributions = new();

    private bool loading { get; set; } = false;
    private bool youTried = false;
    private bool shouldRender;
    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        shouldRender = true;
        youTried = true;

        fantasyPercentages = await fantasyService.GetFantasyPercentageRequest(position);
        playerPercentage = fantasyPercentages != null ? fantasyPercentages.FirstOrDefault(f => f.PlayerId == int.Parse(id)) : null;
        if (playerPercentage != null)
        {
            name = playerPercentage.Name;

            if (playerPercentage.Position == "QB")
            {
                distributions.Add(new Distribution { Label = "PassYd%", Value = (decimal)(100 * playerPercentage.PassYDShare) });
                distributions.Add(new Distribution { Label = "PassTD%", Value = (decimal)(100 * playerPercentage.PassTDShare) });
                distributions.Add(new Distribution { Label = "RushYd%", Value = (decimal)(100 * playerPercentage.RushYDShare) });
                distributions.Add(new Distribution { Label = "RushTD%", Value = (decimal)(100 * playerPercentage.RushTDShare) });
            }
            else
            {
                distributions.Add(new Distribution { Label = "RushYd%", Value = (decimal)(100 * playerPercentage.RushYDShare) });
                distributions.Add(new Distribution { Label = "RushTD%", Value = (decimal)(100 * playerPercentage.RushTDShare) });
                distributions.Add(new Distribution { Label = "Rec%", Value = (decimal)(100 * playerPercentage.RecShare) });
                distributions.Add(new Distribution { Label = "RecYd%", Value = (decimal)(100 * playerPercentage.RecYDShare) });
                distributions.Add(new Distribution { Label = "RecTD%", Value = (decimal)(100 * playerPercentage.RecTDShare) });

            }
        }

        loading = false;
        shouldRender = true;
    }

    private class Distribution
    {
        public string Label { get; set; } = "";
        public decimal Value { get; set; } 
    }

    private string Title() => "Fantasy Distribution for " + name;

}
