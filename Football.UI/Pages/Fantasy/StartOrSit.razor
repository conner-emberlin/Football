@page "/StartOrSit"
<PageTitle>Start Or Sit</PageTitle>
@using Football.Api.Models;
@using Football.UI.Helpers;
@inject IRequests requests;

<h4>Start or Sit Assistant</h4>

<EditForm model="this" OnSubmit="HandleInput">
    <TextBoxName @bind-Value="this.name1" />
    <TextBoxName @bind-Value="this.name2" />
    <TextBoxName @bind-Value="this.name3" />
    <button class="button-22" type="submit">Search</button>
</EditForm>
<div style="height:10px;font-size:1px;">&nbsp;</div>
@if (showSubmit)
{
    <button class="button-22" type="submit" @onclick="HandleSubmit">Submit</button>
}

@if (loading)
{
    <div class="spinner"></div>
}
<div style="height:10px;font-size:1px;">&nbsp;</div>
@if (StartOrSits != null && StartOrSits.Any()  && !loading){

    <div class="table_container">
        <table class="boostrap4_table_head_dark_striped_rounded_with_shadow">
            <thead>
                <tr>
                    <th>&nbsp;&nbsp;&nbsp;&nbsp;</th>
                    @foreach (var sos in StartOrSits)
                    {
                        <th>@sos.Name (@sos.Position)</th>
                    }
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Team</td>
                    @foreach (var sos in StartOrSits)
                    {
                        if(!string.IsNullOrEmpty(sos.Team)){
                            var imgPath = "https://localhost:7176/Logos/" + sos.Team + ".png";
                            <td><img src="@imgPath" width="30" height="30"></td>
                        }
                        else
                        {
                            <td>-</td>
                        }
                    }
                </tr>
                <tr>
                    <td>Opponent</td>
                    @foreach (var sos in StartOrSits)
                    {
                        if (sos.OpponentTeamId == 0)
                        {
                            <td>BYE</td>
                        }
                        else
                        {
                            <td> @string.Format("{0} {1}", sos.AtIndicator, sos.OpponentTeam) <b><text style="@formatter.FormatMatchupRank(sos.MatchupRanking)">(@sos.MatchupRanking.ToString())</text></b></td>
                        }
                    }
                </tr>
                <tr>
                    <td>Betting</td>
                    @foreach (var sos in StartOrSits)
                    {
                        <td>
                            <p>
                                OU: @sos.OverUnder
                                <br>
                                Line: @sos.Line
                                <br>
                                Implied Total: @sos.ImpliedTeamTotal
                            </p>

                        </td>
                    }
                </tr>
                <tr>
                    <td>Match</td>
                    @foreach (var sos in StartOrSits)
                    {
                        <td>
                            <p>
                                Date: @sos.GameTime
                                <br>
                                @if (!string.IsNullOrEmpty(sos.Temperature))
                                {
                                    <text>@sos.Temperature</text>
                                    <br>
                                }
                                @if (!string.IsNullOrEmpty(sos.Wind))
                                {
                                    <text>@sos.Wind</text>
                                    <br>
                                }
                                @if (!string.IsNullOrEmpty(sos.Condition))
                                {
                                    <text>@sos.Condition </text> <img src="@sos.ConditionURL" width="30" height="30">
                                }
                            </p>
                        </td>
                    }
                </tr>
                <tr>
                    <td>Projected Points</td>
                    @foreach (var sos in StartOrSits)
                    {
                        if (sos.ProjectedPoints > 0)
                        {
                            <td>@sos.ProjectedPoints</td>
                        }
                        else
                        {
                            <td>-</td>
                        }
                    }
                </tr>
                <tr>
                    <td>Player Comparisons</td>
                    @foreach (var sos in StartOrSits)
                    {
                        <td>
                            @foreach (var comp in sos.PlayerComparisons)
                            {
                                var diff = Math.Round(@comp.ProjectedPoints - @comp.FantasyPoints, 2);
                                diff *= -1;
                                <text>
                                    @comp.Name <b>vs</b> @sos.OpponentTeam:
                                    Proj: @Math.Round(comp.ProjectedPoints, 2)
                                    Actual: @Math.Round(comp.FantasyPoints, 2)
                                    Diff: <b><text style="@formatter.GetDiffColor(diff)">@Math.Round(diff, 2)</text></b>
                                </text>
                                <br>
                            }
                        </td>
                    }
                </tr>
                <tr>
                <td>Start/Sit</td>
                    @foreach (var sos in StartOrSits)
                    {
                        <td><b><text style="@formatter.GetStartColor(sos.Start)">@formatter.StartFormat(sos.Start)</text></b></td>
                    }
                </tr>
            </tbody>
        </table>
    </div>
}

@code {

    private bool loading { get; set; } = false;
    private bool showSubmit = false;
    private bool shouldRender;

    private string? name1 { get; set; } = "";
    private string? name2 { get; set; } = "";
    private string? name3 { get; set; } = "";

    private List<SimplePlayerModel>? allPlayers { get; set; } = new();
    private SimplePlayerModel? player1 { get; set; } = new();
    private SimplePlayerModel? player2 { get; set; } = new();
    private SimplePlayerModel? player3 { get; set; } = new();
    private List<SimplePlayerModel> players { get; set; } = new();
    private List<StartOrSitModel>? StartOrSits { get; set; } = new();

    private Formatter formatter = new();

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync() => allPlayers = await requests.GetSimplePlayersRequest(true);

    private void HandleInput()
    {
        showSubmit = false;
        players.Clear();
        if (StartOrSits.Any()) StartOrSits.Clear();
        if (allPlayers != null) SetPlayers();
        if (players.Any()) showSubmit = true;
        shouldRender = true;

    }

    private void SetPlayers()
    {
        if (allPlayers.Any())
        {
            if (!string.IsNullOrEmpty(name1))
            {
                player1 = allPlayers.FirstOrDefault(p => p.Name.ToLower().Contains(name1.ToLower().Trim()));
                if (player1 != null)
                {
                    players.Add(player1);
                    name1 = player1.Name;
                }
                else name1 = string.Empty;
            }
            if (!string.IsNullOrEmpty(name2))
            {
                player2 = allPlayers.FirstOrDefault(p => p.Name.ToLower().Contains(name2.ToLower().Trim()));
                if (player2 != null)
                {
                    players.Add(player2);
                    name2 = player2.Name;
                }
                else name2 = string.Empty;
            }
            if (!string.IsNullOrEmpty(name3))
            {
                player3 = allPlayers.FirstOrDefault(p => p.Name.ToLower().Contains(name3.ToLower().Trim()));
                if (player3 != null)
                {
                    players.Add(player3);
                    name3 = player3.Name;
                }
                else name3 = string.Empty;
            }
            shouldRender = true;
        }
    }

    private async Task HandleSubmit()
    {
        loading = true;
        showSubmit = false;
        StartOrSits = await requests.PostStartOrSitRequest(players.Select(p => p.PlayerId).ToList());
        loading = false;
        shouldRender = true;
    }
}
