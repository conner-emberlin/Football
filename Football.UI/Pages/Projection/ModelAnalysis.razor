@page "/ModelAnalysis"
<PageTitle>Model Analysis</PageTitle>

@using Football.UI.Helpers;
@using Football.UI.Interfaces;
@using Football.Api.Models.Projection;
@using ApexCharts;

@inject IProjectionService projectionService;

<h4>Model Analysis</h4>
<div>
    @foreach (var position in format.Positions())
    {

        <input type="radio" name="players" id=" @position" value="@position"
        @onchange="SetPosition"
               checked=@(Position?.Equals(position,StringComparison.OrdinalIgnoreCase)) />
        <label for="@position ">@position</label>

    }
</div>

<div style="height:10px;font-size:1px;">&nbsp;</div>
<button class="button-22" role="button" @onclick="HandleInput">
    Submit
</button>

<div style="height:10px;font-size:1px;">&nbsp;</div>

@if (loading)
{
    <div class="spinner"></div>
}

@if (SeasonProjectionAnalyses.Any() && PositionEnum != "DST" && PositionEnum != "K")
{
    <div style="height:10px;font-size:1px;">&nbsp;</div>
    <div class="table_container">
        <table class="base_table">
            <thead>
                <tr>
                    <th>Season </th>
                    <th>
                        <span class="sort-link" onclick="@(() => SetTable("MSE"))">MSE</span>
                        <span class="oi @(tableSort.GetSortStyle("MSE"))"></span>
                    </th>
                    <th>
                        <span class="sort-link" onclick="@(() => SetTable("RSquared"))">RSqrd</span>
                        <span class="oi @(tableSort.GetSortStyle("RSquared"))"></span>
                    </th>
                    <th>
                        <span class="sort-link" onclick="@(() => SetTable("AvgError"))">AvgError</span>
                        <span class="oi @(tableSort.GetSortStyle("AvgError"))"></span>
                    </th>
                    <th>
                        <span class="sort-link" onclick="@(() => SetTable("AvgErrorPerGame"))">AvgErrorPerGame</span>
                        <span class="oi @(tableSort.GetSortStyle("AvgErrorPerGame"))"></span>
                    </th>
                    <th>
                        <span class="sort-link" onclick="@(() => SetTable("ProjectionCount"))">Count</span>
                        <span class="oi @(tableSort.GetSortStyle("ProjectionCount"))"></span>
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var p in SeasonProjectionAnalyses)
                {
                    <tr>
                        <td>@p.Season</td>
                        <td>@Math.Round(p.MSE, 2)</td>
                        <td>@Math.Round(p.RSquared, 4)</td>
                        <td>@p.AvgError</td>
                        <td>@p.AvgErrorPerGame</td>
                        <td>@p.ProjectionCount</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
@if (ProjectionAnalyses.Any())
{
    <div style="height:10px;font-size:1px;">&nbsp;</div>
    <div class="table_container">
        <table class="boostrap4_table_head_dark_striped_rounded_with_shadow">
            <thead>
                <tr>
                    <th>Week </th>
                    <th>
                        <span class="sort-link" onclick="@(() => SetTable("MSE"))">MSE</span>
                        <span class="oi @(tableSort.GetSortStyle("MSE"))"></span>
                    </th>
                    <th>
                        <span class="sort-link" onclick="@(() => SetTable("RSquared"))">RSqrd</span>
                        <span class="oi @(tableSort.GetSortStyle("RSquared"))"></span>
                    </th>
                    <th>
                        <span class="sort-link" onclick="@(() => SetTable("MAE"))">MAE</span>
                        <span class="oi @(tableSort.GetSortStyle("MAE"))"></span>
                    </th>
                    <th>
                        <span class="sort-link" onclick="@(() => SetTable("MAPE"))">MAPE</span>
                        <span class="oi @(tableSort.GetSortStyle("MAPE"))"></span>
                    </th>
                    <th>
                        <span class="sort-link" onclick="@(() => SetTable("AvgError"))">AvgError</span>
                        <span class="oi @(tableSort.GetSortStyle("AvgError"))"></span>
                    </th>
                    <th>
                        <span class="sort-link" onclick="@(() => SetTable("AvgRankError"))">AvgRankError</span>
                        <span class="oi @(tableSort.GetSortStyle("AvgRankError"))"></span>
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var p in ProjectionAnalyses)
                {
                    <tr>
                        <td>@p.Week</td>                        
                        <td>@Math.Round(p.MSE,2)</td>
                        <td>@Math.Round(p.RSquared,4)</td>
                        <td>@Math.Round(p.MAE,2)</td>
                        <td>@Math.Round(p.MAPE,2)</td>
                        <td>@p.AvgError</td>
                        <td>@p.AvgRankError</td>
                        <td>
                            <a href="@GetProjectionErrorLink(p.Position, p.Week)"> <i class="oi oi-magnifying-glass" /></a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <hr style="width:100%;text-align:left;margin-left:0">
    <div style="height:10px;font-size:1px;">&nbsp;</div>
    <h6>Avg Error by Week</h6>
        <ApexChart TItem="WeeklyProjectionAnalysisModel"
                Height="400">
        <ApexPointSeries TItem="WeeklyProjectionAnalysisModel"
                         Items="ProjectionAnalyses"
                         Name="Avg Error"
                         SeriesType="SeriesType.Line"
                         XValue="e => e.Week"
                         YValue="e=> (decimal)e.AvgError" />
    </ApexChart>
}
@code {
    
    

    private List<WeeklyProjectionAnalysisModel>? ProjectionAnalyses = new();
    private List<SeasonProjectionAnalysisModel>? SeasonProjectionAnalyses = new();

    public string? Position { get; set; } = "Quarterback";
    public string PositionEnum { get; set; } = "1";
    private bool shouldRender;
    private bool loading { get; set; }
    int count = 0;

    public TableSort tableSort = new();
    public Formatter format = new();

    protected override bool ShouldRender() => shouldRender;

    private void SetPosition(ChangeEventArgs args)
    {
        Position = args.Value?.ToString();
        ProjectionAnalyses?.Clear();
        SeasonProjectionAnalyses?.Clear();
        tableSort = new();
    }

    private async Task HandleInput()
    {
        loading = true;
        shouldRender = true;
        ProjectionAnalyses?.Clear();
        SeasonProjectionAnalyses?.Clear();
        PositionEnum = format.SetPosition(Position);
        ProjectionAnalyses = await projectionService.GetCurrentSeasonWeeklyAnalysisRequest(PositionEnum);
        SeasonProjectionAnalyses = await projectionService.GetPreviousSeasonsAnalysisRequest(PositionEnum);
        loading = false;
        shouldRender = true;
    }

    private void SetTable(string columnName) => ProjectionAnalyses = tableSort.SortTable<WeeklyProjectionAnalysisModel>(ProjectionAnalyses, columnName);
    private string GetProjectionErrorLink(string position, int week) => string.Format("{0}/{1}/{2}", "/ProjectionError", position, week);
}


