@page "/Projections"
<PageTitle>Season Projections</PageTitle>
@using System.Text.Json
@using System.Text.Json.Serialization
@using Football.Api.Models;
@using Football.Projections.Models;
@using Football.Fantasy.Models;
@inject IHttpClientFactory ClientFactory

<h4>Season Projections</h4>
<div>
@foreach(var position in Positions)
{
    
        <input type="radio" name="players" id=" @position" value="@position" 
            @onchange= "SetPosition" 
            checked=@(Position.Equals(position,StringComparison.OrdinalIgnoreCase))
        />
        <label for="@position ">@position</label>
    
}
</div>
<div style="height:10px;font-size:1px;">&nbsp;</div>
<button class="button-22" role="button" @onclick="GetProjections"> 
    Submit
    </button>

<div style="height:10px;font-size:1px;">&nbsp;</div>

@if(loading)
{   
    <div class="spinner"></div>
}
@if (badRequestError || players is null)
{
    <p>Unexpected Error. Please try again.</p>
}

else if(players.Count > 0)
{
    <button class="button-22" role = "button" @onclick="UploadProjections">
        Upload
    </button>
    @if(count > 0)
    {
        <p>@count records added </p>
        count = 0;
    }
    @if (recordDeleted)
    {
        <text>Record deleted.</text>
    }
    <div style="height:10px;font-size:1px;">&nbsp;</div>
    <div class="table_container">
        <table class="boostrap4_table_head_dark_striped_rounded_with_shadow">
            <thead>
                <tr>
                    <th>Rank</th>
                    <th>Name</th>
                    <th>Position</th>
                    <th>Team</th>
                    <th>Total Points</th>
                    <th>PPG</th>
                    @if (seasonOver && PositionEnum != "FLEX")
                    {
                        <th>ActualTotal</th>
                        <th>ActualPPG</th>
                        <th>TotalError</th>
                        <th>PPGError</th>
                    }
                    @if (players.First().CanDelete)
                    {
                        <th></th>                        
                    }

                </tr>
        </thead>
        <tbody>
        @foreach (var p in players)
        {  
                    var logoPhotoPath = p.Team != string.Empty ? "https://localhost:7176/Logos/" + p.Team + ".png" : "https://localhost:7176/Logos/nfl.png";
            <tr>
            <td>@GetRank(p)</td>
            <td><a class = "page-links" href="Players/@p.PlayerId"> @p.Name</a></td>
            <td>@p.Position</td>
            <td><img src="@logoPhotoPath" width="30" height="30"></td>
            <td>@Math.Round((double)p.ProjectedPoints,2)</td>
            <td>@Math.Round((double)p.ProjectedPoints/17,2)</td>
                        @if (seasonOver && PositionEnum != "FLEX")
                        {
                            var sa = GetSeasonProjectionAnalysis(p.PlayerId);
                            if (sa != null && sa.WeeksPlayed > 0)
                            {
                                <td>@Math.Round(sa.TotalFantasy,2)</td>
                                <td>@Math.Round(sa.TotalFantasy/sa.WeeksPlayed, 2)</td>
                                <td>@Math.Round(sa.TotalFantasy - sa.SeasonFantasyProjection, 2)</td>
                                <td>@Math.Round((sa.SeasonFantasyProjection/17) - (sa.TotalFantasy/sa.WeeksPlayed), 2)</td>
                            }
                            else
                            {
                                <td>--</td>
                                <td>--</td>
                                <td>--</td>
                                <td>--</td>
                            }
                        }
                        @if (p.CanDelete)
                        {
                            <td>
                                <button type="button" style="color:red" class="btn btn-link" @onclick="() => DeleteProjection(p.PlayerId, p.Season)">
                                    <i sytle="color:red" class="oi oi-x" />
                                </button>
                            </td>
                        }
                    </tr>
        }
        </tbody>
    </table>
    </div>
}
@code {
    JsonSerializerOptions options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };

    private bool shouldRender;
    protected override bool ShouldRender() => shouldRender;
    private bool badRequestError;   
    private List<SeasonProjectionModel> players = new();
    private List<string> Positions = new() { "Quarterback", "Runningback", "Wide Receiver", "Tight End", "Flex" };
    public string Position { get; set; } = "Quarterback";
    public string PositionEnum { get; set; } = "1";
    private bool loading { get; set; }
    int count = 0;
    public bool seasonOver { get; set; } = false;
    private bool recordDeleted = false;
    public List<SeasonProjectionError>? analysis;

    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7028/api/Player/current-week");
        request.Headers.Add("Accept", "application/json");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            seasonOver = await JsonSerializer.DeserializeAsync<int>(responseStream, options) > 18;
        }
    }
    public async Task UploadProjections()
    {
        var request = new HttpRequestMessage(HttpMethod.Post, "https://localhost:7028/api/Projection/season/" + @PositionEnum);
        request.Headers.Add("Accept", "application/json");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            count  = await JsonSerializer.DeserializeAsync<int>(responseStream, options);
        }
    }

    public void SetPosition(ChangeEventArgs args)
    {
        Position = args.Value.ToString();
        recordDeleted = false;
        players.Clear();
    }

    public async Task GetProjections()
    {
        loading = true;
        shouldRender = true;
        players.Clear();
        switch (Position.ToLower())
        {
            case "quarterback":
                PositionEnum = "QB";
                break;
            case "runningback":
                PositionEnum = "RB";
                break;
            case "wide receiver":
                PositionEnum = "WR";
                break;
            case "tight end":
                PositionEnum = "TE";
                break;
            case "flex":
                PositionEnum = "FLEX";
                break;
            default: PositionEnum = "QB"; break;
        }
        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7028/api/Projection/season/" + PositionEnum);          
        request.Headers.Add("Accept", "application/json");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            players = await JsonSerializer.DeserializeAsync<List<SeasonProjectionModel>>(responseStream, options);
            if (PositionEnum != "FLEX") analysis = await GetSeasonProjectionAnalyses(PositionEnum);
            badRequestError = false;
        }
        else badRequestError = true;
        loading = false;
        shouldRender = true;
    }

    public async Task<List<SeasonProjectionError>?> GetSeasonProjectionAnalyses(string position)
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7028/api/Projection/season-projection-error/" + @PositionEnum);
        request.Headers.Add("Accept", "application/json");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            return await JsonSerializer.DeserializeAsync<List<SeasonProjectionError>>(responseStream, options);
        }
        return null;
    }

    public async Task DeleteProjection(int playerId, int season)
    {
        var url = string.Format("{0}/{1}/{2}", "https://localhost:7028/api/Projection/season", playerId, season);
        var request = new HttpRequestMessage(HttpMethod.Delete, url);
        request.Headers.Add("Accept", "application/json");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            recordDeleted = await JsonSerializer.DeserializeAsync<bool>(responseStream, options);
            await GetProjections();
        }
        else badRequestError = true;
        shouldRender = true;
    }
    private SeasonProjectionError? GetSeasonProjectionAnalysis(int playerId) => analysis.FirstOrDefault(a => a.Player.PlayerId == playerId);

    private int GetRank(SeasonProjectionModel projection) => players.IndexOf(projection) + 1;
}

