@page "/Projections"
<PageTitle>Projections</PageTitle>
@using System.Text.Json
@using System.Text.Json.Serialization
@using Football.Models;
@inject IHttpClientFactory ClientFactory

<h4>2023 Projections</h4>
<div>
@foreach(var position in Positions)
{
    
        <input type="radio" name="players" id=" @position" value="@position" 
            @onchange= "SetPosition" 
            checked=@(Position.Equals(position,StringComparison.OrdinalIgnoreCase))
        />
        <label for="@position ">@position</label>
    
}
</div>
<div style="height:10px;font-size:1px;">&nbsp;</div>
<button class="button-22" role="button" @onclick="CalculateProjections"> 
    Submit
    </button>

<div style="height:10px;font-size:1px;">&nbsp;</div>

@if (badRequestError || players is null)
{
    <p>Unexpected Error. Please try again.</p>
}
else if(players.Count > 0)
{
    <button class="button-22" role = "button" @onclick="UploadProjections">
        Upload
    </button>
    @if(count > 0)
    {
        <p>@count records added </p>
        count = 0;
    }
    <div style="height:10px;font-size:1px;">&nbsp;</div>
    <div class="table_container">
        <table class="boostrap4_table_head_dark_striped_rounded_with_shadow">
        <thead>
            <tr>
                <th>Rank</th>
                <th>Name</th>
                <th>Team</th>
                <th>Position</th>
                <th>Total Points</th>
                <th>PPG</th>
            </tr>
        </thead>
        <tbody>
        @for (int i = 1; i <= players.Count; i ++)
        {
            <tr>
            <td>@i</td>
            <td>@players.ElementAt(i-1).Name</td>
            <td>@players.ElementAt(i-1).Team</td>
            <td>@players.ElementAt(i-1).Position</td>
            <td>@Math.Round((double)players.ElementAt(i-1).ProjectedPoints,2)</td>
            <td>@Math.Round((double)players.ElementAt(i-1).ProjectedPoints/17,2)</td>
            </tr>
        }
        </tbody>
    </table>
    </div>
}
@code {
    private bool shouldRender;
    protected override bool ShouldRender() => shouldRender;
    private bool badRequestError;   
    private List<ProjectionModel> players = new();
    private List<string> Positions = new() { "Quarterback", "Runningback", "Wide Receiver", "Tight End", "Flex" };
    public string Position { get; set; } = "Quarterback";
    public string PositionEnum { get; set; } = "1";
    int count = 0;

    public async Task UploadProjections()
    {
        var request = new HttpRequestMessage(HttpMethod.Post, "https://localhost:7028/api/Prediction/upload/" + @PositionEnum);
        request.Headers.Add("Accept", "application/json");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            using var responseStream = await response.Content.ReadAsStreamAsync();
            count  = await JsonSerializer.DeserializeAsync<int>(responseStream, options);

        }
    }
    public void SetPosition(ChangeEventArgs args)
    {
        Position = args.Value.ToString();
    }

    public async Task CalculateProjections()
    {
        players.Clear();
        switch (Position.ToLower())
        {
            case "quarterback":
                PositionEnum = "1";
                break;
            case "runningback":
                PositionEnum = "2";
                break;
            case "wide receiver":
                PositionEnum = "3";
                break;
            case "tight end":
                PositionEnum = "4";
                break;
            case "flex":
                PositionEnum = "5";
                break;
            default: PositionEnum = "1"; break;
        }
        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7028/api/Prediction/" + @PositionEnum);          
        request.Headers.Add("Accept", "application/json");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            var options = new JsonSerializerOptions {PropertyNameCaseInsensitive = true};
            using var responseStream = await response.Content.ReadAsStreamAsync();
            players = await JsonSerializer.DeserializeAsync<List<ProjectionModel>>(responseStream, options);               
        }
        else
        {
            badRequestError = true;
        }
        shouldRender = true;
    }
}

