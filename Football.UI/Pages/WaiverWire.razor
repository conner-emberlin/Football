@using System.Text.Json
@using System.Text.Json.Serialization
@using Football.Data.Models;
@using Football.Fantasy.Models;
@using Football.Fantasy.Analysis.Models;
@using Football.Players.Models;
@inject IHttpClientFactory ClientFactory
@page "/WaiverWire/"

@if (loading)
{
    <div class="spinner"></div>
}

else
{
    <h4>@GetHeader()</h4>
}

@if (candidates.Any())
{
    <div class="table_container">
        <table class="boostrap4_table_head_dark_striped_rounded_with_shadow">
            <thead>
                <tr>
                    <th></th>
                    <th>Name</th>
                    <th>Position</th>
                    <th>Team</th>
                    <th>Rostered%</th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 1; i < candidates.Count; i++)
                {
                    var logoPhotoPath = candidates.ElementAt(i - 1).PlayerTeam != null ?
                                         "https://localhost:7176/Logos/" + candidates.ElementAt(i - 1).PlayerTeam!.Team + ".png" 
                                       : "https://localhost:7176/Logos/nfl.png";
                    <tr>
                        <td>@i</td>
                        <td><a class="page-links" href="Players/@candidates.ElementAt(i-1).Player.PlayerId"> @candidates.ElementAt(i-1).Player.Name</a></td>
                        <td>@candidates.ElementAt(i-1).Player.Position</td>
                        <td><img src="@logoPhotoPath" width="30" height="30"></td>
                        <td>@candidates.ElementAt(i-1).RosteredPercentage</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else if (youTried && badRequestError)
{
    <text>Something Went Wrong.</text>
}

@code {
    public List<WaiverWireCandidate>? candidates = new();

    public bool badRequestError = false;
    public bool youTried = false;
    private bool shouldRender;
    private bool loading = false;

    protected override bool ShouldRender() => shouldRender;

    public string GetHeader() => "Waiver Wire - Week " + candidates.First().Week.ToString();

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7028/api/Fantasy/waiver-wire");
        request.Headers.Add("Accept", "application/json");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            using var responseStream = await response.Content.ReadAsStreamAsync();
            candidates = await JsonSerializer.DeserializeAsync<List<WaiverWireCandidate>>(responseStream, options);
            candidates = candidates.OrderByDescending(c => c.RosteredPercentage).ToList();
        }
        loading = false;
        shouldRender = true;
    }



}

