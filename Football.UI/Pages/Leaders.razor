@using System.Text.Json
@using System.Text.Json.Serialization
@using Football.Data.Models;
@using Football.Fantasy.Models;
@using Football.Players.Models;
@using Football.UI.Helpers;
@inject IHttpClientFactory ClientFactory
@page "/Leaders/"

<h4>Fantasy Leaders</h4>
<EditForm model="this" OnSubmit="GetFantasyResults">
<TextBoxWeek @bind-Week ="this.week"/>
<TextBoxPosition @bind-Position="this.position"/>
<button class="button-22" type="submit">Submit</button>
</EditForm>
<div style="height:10px;font-size:1px;">&nbsp;</div>

@if (loading)
{
    <div class="spinner"></div>
}

@if (currentLeaders.Any() && (!youTried || showAll))
{
    <div class="table_container">
        <table class="boostrap4_table_head_dark_striped_rounded_with_shadow">
            <thead>
                <tr>                 
                    <th></th>                   
                    <th>Name</th>
                    <th>Position</th>
                    <th>Games</th>                    
                    <th>Points</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var leader in currentLeaders)
                {
                    <tr>                      
                        <td>@form.Rank(currentLeaders, leader)</td>                      
                        <td><a class="page-links" href="Players/@leader.PlayerId"> @leader.Name</a></td>
                        <td style="color:@form.PositionColor(leader.Position)"><b>@leader.Position</b></td>
                        <td>@leader.Games</td>                       
                        <td>@leader.FantasyPoints</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else if(youTried && !badRequestError && filterRunning && filteredLeaders.Any())
{
    <div class="table_container">
        <table class="boostrap4_table_head_dark_striped_rounded_with_shadow">
            <thead>
                <tr>
                    <th></th>                   
                    <th>Name</th>
                    <th>Position</th>
                    <th>Games</th>
                    <th>Points</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var leader in filteredLeaders)
                {
                    <tr>
                        <td>@form.Rank(filteredLeaders, leader)</td>                       
                        <td><a class="page-links" href="Players/@leader.PlayerId"> @leader.Name</a></td>
                        <td style="color:@form.PositionColor(leader.Position)"><b>@leader.Position</b></td>
                        <td>@leader.Games</td>
                        <td>@leader.FantasyPoints</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else if(youTried && !badRequestError && filterWeekly && weeklyResults.Any())
{
        <div class="table_container">
        <table class="boostrap4_table_head_dark_striped_rounded_with_shadow">
        <thead>
            <tr>
                <th></th>
                <th>Name</th>
                <th>Position</th>
                <th>Points</th>
            </tr>
        </thead>
        <tbody>
                @foreach (var result in weeklyResults)
                {
                    <tr>
                        <td>@form.Rank(weeklyResults, result)</td>
                        <td><a class="page-links" href="Players/@result.PlayerId"> @result.Name</a></td>
                        <td style="color:@form.PositionColor(result.Position)"><b>@result.Position</b></td>
                        <td>@result.FantasyPoints</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else if(youTried && badRequestError)
{
    <text>Something Went Wrong.</text>
}

@code {
    public string week { get; set; } = "";
    public string position { get; set; } = "";
    public List<WeeklyFantasy> weeklyResults = new();
    public List<SeasonFantasy> currentLeaders = new();
    public List<SeasonFantasy> filteredLeaders = new();

    public bool badRequestError = false;
    public bool youTried = false;
    private bool shouldRender;
    private bool loading = false;

    private bool filterWeekly = false;
    private bool filterRunning = false;
    private bool showAll = false;

    protected override bool ShouldRender() => shouldRender;

    public Formatter form = new();

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7028/api/Fantasy/season-totals");
        request.Headers.Add("Accept", "application/json");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            using var responseStream = await response.Content.ReadAsStreamAsync();
            currentLeaders = await JsonSerializer.DeserializeAsync<List<SeasonFantasy>>(responseStream, options);
        }
        loading = false;
        shouldRender = true;
    }

    public async Task GetFantasyResults()
    {
        youTried = true;
        badRequestError = false;
        filterRunning = false;
        filterWeekly = false;
        showAll = false;

        if (!string.IsNullOrEmpty(week))
        {
            filterWeekly = true;
            var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7028/api/Fantasy/data/weekly/leaders/" + week);
            request.Headers.Add("Accept", "application/json");
            var client = ClientFactory.CreateClient();
            var response = await client.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
                using var responseStream = await response.Content.ReadAsStreamAsync();
                weeklyResults = (await JsonSerializer.DeserializeAsync<List<WeeklyFantasy>>(responseStream, options)).OrderByDescending(p => p.FantasyPoints).ToList();
                foreach (var r in weeklyResults)
                {
                    r.FantasyPoints = Math.Round(r.FantasyPoints, 2);
                }

                weeklyResults = !String.IsNullOrEmpty(position) ? weeklyResults.Where(w => w.Position.ToLower() == position.Trim().ToLower()).ToList() : weeklyResults;

                badRequestError = false;
            }
            else
            {
                badRequestError = true;
            }
        }
        else if(string.IsNullOrEmpty(week) && !string.IsNullOrEmpty(position))
        {
            filterRunning = true;
            filteredLeaders = currentLeaders.Where(c => c.Position.ToLower() == position.ToLower()).ToList();
            badRequestError = false;

        }
        else
        {
            showAll = true;
            badRequestError = false;
        }
        shouldRender = true;
    }   
}
