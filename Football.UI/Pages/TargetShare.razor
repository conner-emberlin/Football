@page "/TargetShare"
<PageTitle>Target Share</PageTitle>
@using System.Text.Json
@using System.Text.Json.Serialization
@using Football.Projections.Models;
@using Football.Players.Models;
@using Football.Fantasy.Models;
@using Football.Fantasy.Analysis.Models;
@using Football.Enums;
@using Football.UI.Helpers;
@inject IHttpClientFactory ClientFactory

<h4>Target Share</h4>

@if (loading)
{
    <div class="spinner"></div>
}
@if (badRequestError)
{
    <p>Unexpected Error. Please try again.</p>
}

@if (targetShare.Any())
{
    <div style="height:10px;font-size:1px;">&nbsp;</div>
    <div class="table_container">
        <table class="boostrap4_table_head_dark_striped_rounded_with_shadow">
            <thead>
                <tr>
                    <th>Team</th>
                    <th>
                        <span class="sort-link" onclick="@(() => SetTable("RBTargetShare"))">RBTarget%</span>
                        <span class="oi @(tableSort.GetSortStyle("RBTargetShare"))"></span>
                    </th>
                    <th>
                        <span class="sort-link" onclick="@(() => SetTable("RBCompShare"))">RBComp%</span>
                        <span class="oi @(tableSort.GetSortStyle("RBCompShare"))"></span>
                    </th>
                    <th>
                        <span class="sort-link" onclick="@(() => SetTable("WRTargetShare"))">WRTarget%</span>
                        <span class="oi @(tableSort.GetSortStyle("WRTargetShare"))"></span>
                    </th>
                    <th>
                        <span class="sort-link" onclick="@(() => SetTable("WRCompShare"))">WRComp%</span>
                        <span class="oi @(tableSort.GetSortStyle("WRCompShare"))"></span>
                    </th>
                    <th>
                        <span class="sort-link" onclick="@(() => SetTable("TETargetShare"))">TETarget%</span>
                        <span class="oi @(tableSort.GetSortStyle("TETargetShare"))"></span>
                    </th>
                    <th>
                        <span class="sort-link" onclick="@(() => SetTable("TECompShare"))">TEComp%</span>
                        <span class="oi @(tableSort.GetSortStyle("TECompShare"))"></span>
                    </th>

                </tr>
            </thead>
            <tbody>
                @foreach (var t in targetShare){
                <tr>
                    <td><a class="page-links" href="Teams/@t.Team.TeamId"> @t.Team.TeamDescription</a></td>
                    <td>@Math.Round(t.RBTargetShare*100, 1)</td>
                    <td>@Math.Round(t.RBCompShare*100, 1)</td>
                    <td>@Math.Round(t.WRTargetShare*100, 1)</td>
                    <td>@Math.Round(t.WRCompShare*100, 1)</td>
                    <td>@Math.Round(t.TETargetShare*100, 1)</td>
                    <td>@Math.Round(t.TECompShare*100, 1)</td>
                </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    public List<Football.Fantasy.Analysis.Models.TargetShare> targetShare = new();

    public bool loading { get; set; } = false;
    public bool badRequestError { get; set; } = false;
    private bool shouldRender;
    protected override bool ShouldRender() => shouldRender;

    private TableSort tableSort = new();

    protected override async Task OnInitializedAsync()
    {
        await GetTargetShare();
    }

    public async Task GetTargetShare()
    {
        loading = true;
        targetShare.Clear();
        shouldRender = true;
        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7028/api/Fantasy/targetshares/");
        request.Headers.Add("Accept", "application/json");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            using var responseStream = await response.Content.ReadAsStreamAsync();
            targetShare = await JsonSerializer.DeserializeAsync<List<Football.Fantasy.Analysis.Models.TargetShare>>(responseStream, options);
            badRequestError = false;
        }
        else
        {
            badRequestError = true;
        }
        loading = false;
        shouldRender = true;
    }

    private void SetTable(string columnName)
    {
        targetShare = tableSort.SortTable<Football.Fantasy.Analysis.Models.TargetShare>(targetShare, columnName);
    }
}
