@page "/ManagePlayers"
<PageTitle>Manage Players</PageTitle>
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Text;
@using Football.Players.Models;
@using Football.Api.Models.Players;
@inject IHttpClientFactory ClientFactory

<h4>Manage Players</h4>
<div>
    @foreach (var position in Positions)
    {

        <input type="radio" name="players" id=" @position" value="@position"
               @onchange="SetPosition"
               checked=@(Position.Equals(position,StringComparison.OrdinalIgnoreCase)) />
        <label for="@position ">@position</label>

    }
</div>
<div style="height:10px;font-size:1px;">&nbsp;</div>
<button class="button-22" role="button" @onclick="GetPlayers">
    Submit
</button>
@if (players.Any() && Position != "Rookies")
{
    <div style="height:10px;font-size:1px;">&nbsp;</div>
    <button class="button-22" role="button" @onclick="PlayersInactivated">
        Update
    </button>
}
else if(Position== "Rookies")
{
    <div style="height:10px;font-size:1px;">&nbsp;</div>
    <button class="button-22" role="button" @onclick="AddRookie">
        Add
    </button>
    <div style="height:10px;font-size:1px;">&nbsp;</div>
    @if (rookieAdded && !addRookie)
    {
        <text>Rookie added</text>
    }
    @if (addRookie)
    {
        <div class="table_container">
        <table class="base_table">
            <thead>
                <tr>                   
                    <th>Name</th>
                    <th>Pos</th>
                    <th>Active</th>
                    <th>Team</th>
                    <th>Season</th>
                    <th>Pick#</th>
                    <th>Age</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                      <input type="text" class="form-control" placeholder="Name" @bind="@newRookie.Name" />
                    </td>
                    <td>
                      <input type="text" class="form-control" placeholder="Pos" @bind="@newRookie.Position" />
                    </td>
                    <td>
                      <input type="text" class="form-control" placeholder="Active" @bind="@newRookie.Active" />
                    </td>
                    <td>
                      <input type="text" class="form-control" placeholder="Team" @bind="@newRookie.TeamDrafted" />
                    </td>
                    <td>
                      <input type="text" class="form-control" placeholder="Season" @bind="@newRookie.RookieSeason" />
                    </td>
                    <td>
                      <input type="text" class="form-control" placeholder="Pick#" @bind="@newRookie.DraftPick" />
                    </td>
                    <td>
                      <input type="text" class="form-control" placeholder="Age" @bind="@newRookie.DeclareAge" />
                    </td>
                    <td>
                       <button type="button" class="btn btn-link" @onclick="() => CancelRookieAdd()">
                          <i class="oi oi-circle-x" />
                       </button>
                       <button type="button" class="btn btn-link" @onclick="() => AddRookie(newRookie)">
                          <i class="oi oi-circle-check" />
                       </button>
                    </td>
                </tr>
            </tbody>
        </table>
        </div>
        
    }
}

@if (playersUpdated > 0)
{
    <text> @playersUpdated players inactivated</text>
}
<div style="height:10px;font-size:1px;">&nbsp;</div>

@if (loading)
{
    <div class="spinner"></div>
}
@if (badRequestError)
{
    <p>Unexpected Error. Please try again.</p>
}

else if (players.Any())
{

    <div style="height:10px;font-size:1px;">&nbsp;</div>
    <div class="table_container">
        <table class="base_table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Inactivate</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var p in players)
                {                    
                    bool Checked = false;
                    if (inactivePlayers.Contains(p.PlayerId))
                    {
                        Checked = true;
                    }
                    <tr>
                        <td>@p.Name</td>
                        <td>
                            <input type="checkbox" checked=@Checked
                                   @onchange="eventArgs => { CheckboxClicked(p.PlayerId); }" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

else if (rookies.Any())
{
        <div style="height:10px;font-size:1px;">&nbsp;</div>
    <div class="table_container">
        <table class="base_table">
            <thead>
                <tr>
                    <th>Draft Year</th>
                    <th>Position</th>
                    <th>Name</th>
                    <th>Team Drafted</th>
                    <th>DraftPos</th>
                    <th>Declare Age</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var r in rookies)
                {
                    <tr>
                        <td>@r.RookieSeason</td>
                        <td>@r.Position</td>
                        <td>@r.Name</td>
                        <td>@r.TeamDrafted</td>
                        <td>@r.DraftPick</td>
                        <td>@r.DeclareAge</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
@code {
    private bool shouldRender;
    protected override bool ShouldRender() => shouldRender;
    private bool badRequestError;

    private List<Player>? players = new();
    private List<string> Positions = new() { "Quarterback", "Runningback", "Wide Receiver", "Tight End", "DST", "Kicker", "Rookies" };
    public string Position { get; set; } = "Quarterback";
    public string PositionEnum { get; set; } = "1";
    private bool loading { get; set; }
    int count = 0;
    List<int> inactivePlayers = [];
    int playersUpdated { get; set; }

    bool addRookie { get; set; } = false;
    bool rookieAdded { get; set; } = false;
    bool youTriedToAddRookie { get; set; } = false;

    List<RookiePlayerModel>? rookies = [];
    RookiePlayerModel newRookie = new();

    public void SetPosition(ChangeEventArgs args)
    {
        Position = args.Value.ToString();
        if (players != null)
            players.Clear();
        if (rookies != null)
            rookies.Clear();
        inactivePlayers.Clear();
        playersUpdated = 0;
        addRookie = false;
        rookieAdded = false;
        youTriedToAddRookie = false;
    }

    public async Task GetPlayers()
    {
        loading = true;
        shouldRender = true;

        if (players != null)
            players.Clear();
        inactivePlayers.Clear();

        if (Position.ToLower() != "rookies")
        {
            switch (Position.ToLower())
            {
                case "quarterback":
                    PositionEnum = "QB";
                    break;
                case "runningback":
                    PositionEnum = "RB";
                    break;
                case "wide receiver":
                    PositionEnum = "WR";
                    break;
                case "tight end":
                    PositionEnum = "TE";
                    break;
                case "dst":
                    PositionEnum = "DST";
                    break;
                case "kicker":
                    PositionEnum = "K";
                    break;
                default: PositionEnum = "QB"; break;
            }
            var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7028/api/Player/data/players?active=1&position=" + @PositionEnum);
            request.Headers.Add("Accept", "application/json");
            var client = ClientFactory.CreateClient();
            var response = await client.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
                using var responseStream = await response.Content.ReadAsStreamAsync();
                players = await JsonSerializer.DeserializeAsync<List<Player>>(responseStream, options);
                badRequestError = false;
            }
            else
            {
                badRequestError = true;
            }
            loading = false;
            shouldRender = true;
        }
        else
        {
            await GetRookies();
            loading = false;
            shouldRender = true;
        }
    }

    public async Task PlayersInactivated()
    {
        loading = true;
        playersUpdated = 0;
        if (inactivePlayers.Any())
        {
            var json = JsonSerializer.Serialize(inactivePlayers);
            var content = new StringContent(json, Encoding.UTF8, "application/json");
            var client = ClientFactory.CreateClient();
            var request = new HttpRequestMessage(HttpMethod.Post, "https://localhost:7028/api/player/inactivate") { Content = content };
            var response = await client.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
                using var responseStream = response.Content.ReadAsStream();
                playersUpdated = JsonSerializer.Deserialize<int>(responseStream, options);
            }
            else
            {
                badRequestError = true;
            }
        }
        else badRequestError = true;
        loading = false;
        if (players != null)
        {
            players.Clear();
            await GetPlayers();
        }

        shouldRender = true;
    }

    public async Task GetRookies()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7028/api/Player/rookies/all");
        request.Headers.Add("Accept", "application/json");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            using var responseStream = await response.Content.ReadAsStreamAsync();
            rookies = await JsonSerializer.DeserializeAsync<List<RookiePlayerModel>>(responseStream, options);
            badRequestError = false;
        }
        else
        {
            badRequestError = true;
        }
    }

    public void CheckboxClicked(int playerId)
    {
        if (inactivePlayers.Contains(playerId)) 
            inactivePlayers.Remove(playerId);
        else 
            inactivePlayers.Add(playerId);
    }

    private void AddRookie() { 

        addRookie = !addRookie;
        newRookie = new();
    }
    private async Task AddRookie(RookiePlayerModel newRookie)
    {
        addRookie = false;
        youTriedToAddRookie = true;
        var json = JsonSerializer.Serialize(newRookie);
        var content = new StringContent(json, Encoding.UTF8, "application/json");
        var client = ClientFactory.CreateClient();
        var request = new HttpRequestMessage(HttpMethod.Post, "https://localhost:7028/api/Player/add-rookie")
            {
                Content = content
            };
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            using var responseStream = response.Content.ReadAsStream();
            rookieAdded = await JsonSerializer.DeserializeAsync<bool>(responseStream, options);
            newRookie = new RookiePlayerModel { };
            await GetPlayers();
        }
        else rookieAdded = false;
    }
    private void CancelRookieAdd()
    {
        addRookie = false;
        newRookie = new RookiePlayerModel { };
        youTriedToAddRookie = false;
        shouldRender = true;
    }
}



