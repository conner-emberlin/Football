@page "/error-graph/{id}"
<PageTitle>Fantasy Trends</PageTitle>
@using System.Text.Json
@using System.Text.Json.Serialization
@using Football.Projections.Models;
@using Football.UI.Helpers;
@using ApexCharts;
@inject IHttpClientFactory ClientFactory

@if (loading)
{
    <div class="spinner"></div>
}
else
{
    <h4>@Title()</h4>
}

<div style="height:10px;font-size:1px;">&nbsp;</div>
<div style="height:10px;font-size:1px;">&nbsp;</div>
<div style="height:10px;font-size:1px;">&nbsp;</div>

@if (error.Any())
{
    @if (analysis != null)
    {
        <div class="table_container">
            <table class="boostrap4_table_head_dark_striped_rounded_with_shadow">
                <thead>
                    <tr>
                        <th>Season</th>
                        <th>MSE</th>
                        <th>RSqrd</th>
                        <th>MAE</th>
                        <th>MAPE</th>
                        <th>AvgError</th>
                        <th>AvgRankError</th>
                        <th>AdjAvgError</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>@analysis.Season</td>
                        <td>@Math.Round(analysis.MSE,2)</td>
                        <td>@Math.Round(analysis.RSquared,2)</td>
                        <td>@Math.Round(analysis.MAE,2)</td>
                        <td>@Math.Round(analysis.MAPE,2)</td>
                        <td>@Math.Round(analysis.AvgError,2)</td>
                        <td>@Math.Round(analysis.AvgRankError,2)</td>
                        <td>@Math.Round(analysis.AdjAvgError,2)</td>
                    </tr>
                </tbody>
            </table>
        </div>
        <hr style="width:100%;text-align:left;margin-left:0">
        <div style="height:10px;font-size:1px;">&nbsp;</div>
    }

    <ApexChart TItem="WeeklyProjectionError"
               Height="400">
        <ApexPointSeries TItem="WeeklyProjectionError"
                         Items="error"
                         Name="Projected"
                         SeriesType="SeriesType.Line"
                         XValue="e => e.Week"
                         YValue="e=> (decimal)Math.Round(e.ProjectedPoints,2)" />

        <ApexPointSeries TItem="WeeklyProjectionError"
                         Items="error"
                         Name="Actual"
                         SeriesType="SeriesType.Line"
                         XValue="e => e.Week"
                         YValue="e=> (decimal)Math.Round(e.FantasyPoints, 2)" />
    </ApexChart>
    <hr style="width:100%;text-align:left;margin-left:0">
    <div style="height:10px;font-size:1px;">&nbsp;</div>

    <div class="table_container">
        <table class="boostrap4_table_head_dark_striped_rounded_with_shadow">
            <thead>
                <tr>
                    <th>
                        <span class="sort-link" onclick="@(() => SetTable("Week"))">Week</span>
                        <span class="oi @(tableSort.GetSortStyle("Week"))"></span>
                    </th>
                    <th>
                        <span class="sort-link" onclick="@(() => SetTable("ProjectedPoints"))">Projected Points</span>
                        <span class="oi @(tableSort.GetSortStyle("ProjectedPoints"))"></span>
                    </th>
                    <th>
                        <span class="sort-link" onclick="@(() => SetTable("FantasyPoints"))">Fantasy Points</span>
                        <span class="oi @(tableSort.GetSortStyle("FantasyPoints"))"></span>
                    </th>
                    <th>
                        <span class="sort-link" onclick="@(() => SetTable("Error"))">Error</span>
                        <span class="oi @(tableSort.GetSortStyle("Error"))"></span>
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var e in error)
                {
                    <tr>
                         <td>@e.Week</td>
                        <td>@Math.Round(e.ProjectedPoints, 2)</td>
                        <td>@Math.Round(e.FantasyPoints, 2)</td>
                        <td>@Math.Round(e.Error, 2)</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

}

@code {
    [Parameter]
    public string id { get; set; } = "";

    private bool loading { get; set; } = false;
    public bool badRequestError { get; set; } = false;
    private bool shouldRender;
    public bool youTried = false;
    protected override bool ShouldRender() => shouldRender;

    public List<WeeklyProjectionError>? error = [];
    public WeeklyProjectionAnalysis? analysis { get; set; }

    public string name { get; set; } = "";

    TableSort tableSort = new();

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        shouldRender = true;
        youTried = true;
        await GetWeeklyError();
        await GetWeeklyAnalysis();
        loading = false;
        shouldRender = true;
    }

    public string Title() => "Projection Trends for " + name;

    private void SetTable(string columnName)
    {
        error = tableSort.SortTable<WeeklyProjectionError>(error, columnName);
    }

    private async Task GetWeeklyError()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7028/api/Projection/weekly-error/" + id);
        request.Headers.Add("Accept", "application/json");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            using var responseStream = await response.Content.ReadAsStreamAsync();
            error = await JsonSerializer.DeserializeAsync<List<WeeklyProjectionError>>(responseStream, options);
            if (error.Count > 0)
            {
                error = error.OrderBy(f => f.Week).ToList();
                name = error.Select(f => f.Name).First();
            }
        }
        else badRequestError = true;
    }

    private async Task GetWeeklyAnalysis()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7028/api/Projection/weekly-analysis/player/" + id);
        request.Headers.Add("Accept", "application/json");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            using var responseStream = await response.Content.ReadAsStreamAsync();
            analysis = await JsonSerializer.DeserializeAsync<WeeklyProjectionAnalysis>(responseStream, options);
        }
        else badRequestError = true;
    }
}
