@page "/WeeklyProjections"
<PageTitle>Weekly Projections</PageTitle>

@using Football.Client.Helpers;
@using Football.Client.Interfaces;
@using Football.Shared.Models.Projection;

@inject IProjectionService projectionService;

<h4>Weekly Projections</h4>
<div>
    @foreach (var position in format.Positions(includeFlex: true))
    {

        <input type="radio" name="players" id=" @position" value="@position"
        @onchange="SetPosition"
               checked=@(Position.Equals(position,StringComparison.OrdinalIgnoreCase)) />
        <label for="@position ">@position</label>

    }
</div>
<div style="height:10px;font-size:1px;">&nbsp;</div>
<button class="button-22" role="button" @onclick="HandleSubmit">
    Submit
</button>

<div style="height:10px;font-size:1px;">&nbsp;</div>

@if (loading)
{
    <div class="spinner"></div>
}

else if (players != null && players.Count > 0)
{
    @if (!players.First().CanDelete)
    {
        <button class="button-22" role="button" @onclick="HandleUpload">
            Upload
    </button>
    }
    @if (count > 0)
    {
        <p>@count records added </p>
        count = 0;
    }
    @if (recordDeleted)
    {
        <text>Record deleted.</text>
    }
    <div style="height:10px;font-size:1px;">&nbsp;</div>
    <div style="height:10px;font-size:1px;">&nbsp;</div>
    <h5>Week @players.First().Week</h5>
    <div class="table_container">
        <table class="base_table">
            <thead>
                <tr>
                    <th></th>
                    <th>Name</th>
                    <th>Team</th>
                    <th>Opponent</th>
                    <th>Points</th>
                    @if (players.First().CanDelete)
                    {
                        <th></th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var player in players)
                {
                    var logoPhotoPath = player.Team != null ? "https://localhost:7176/Logos/" + player.Team + ".png" : "https://localhost:7176/Logos/nfl.png";
                    var opponentPhotoPath = !string.IsNullOrEmpty(player.Opponent) ? "https://localhost:7176/Logos/" + player.Opponent + ".png" : "https://localhost:7176/Logos/nfl.png";
                    <tr>
                        <td>@GetRank(player)</td>
                        <td><a class="page-links" href="Players/@player.PlayerId"> @player.Name</a></td>
                        <td><img src="@logoPhotoPath" width="30" height="30"></td>                        
                        <td><img src="@opponentPhotoPath" width="30" height="30"></td>
                        <td>@Math.Round((double)player.ProjectedPoints,2)</td>
                        @if (player.CanDelete)
                        {
                            <td>
                                <button type="button" style="color:red" class="btn btn-link" @onclick="() => HandleDelete(player.PlayerId, player.Season, player.Week)">
                                    <i sytle="color:red" class="oi oi-x" />
                                </button>
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
@code {
    private bool shouldRender;
    protected override bool ShouldRender() => shouldRender;
    private bool badRequestError;
    private List<WeekProjectionModel>? players = new();

    private string Position { get; set; } = "Quarterback";
    private string PositionEnum { get; set; } = "1";
    private bool loading { get; set; }
    private int count = 0;
    private bool recordDeleted = false;

    private Formatter format = new();

    private void SetPosition(ChangeEventArgs args)
    {
        Position = args.Value.ToString();
        recordDeleted = false;
        players?.Clear();
    }

    private async Task HandleSubmit()
    {
        loading = true;
        shouldRender = true;
        players?.Clear();
        PositionEnum = format.SetPosition(Position);
        players = (await projectionService.GetWeekProjectionsRequest(PositionEnum)).OrderByDescending(p => p.ProjectedPoints).Where(p => p.ProjectedPoints > 0).ToList();
        loading = false;
        shouldRender = true;
    }

    private async Task HandleUpload()
    {
        loading = true;
        shouldRender = true;
        count = await projectionService.PostWeekProjectionRequest(PositionEnum);
        loading = false;
        shouldRender = true;
    }

    public async Task HandleDelete(int playerId, int season, int week)
    {
        loading = true;
        recordDeleted = await projectionService.DeleteWeekProjectionRequest(playerId, season, week);
        await HandleSubmit();
        shouldRender = true;
    }

    private string GetHeader() => players.Any() ? "Week " + players.First().Week + " Projections" : string.Empty;
    private int GetRank(WeekProjectionModel projection) => players != null ? players.IndexOf(projection) + 1 : 0;

}


