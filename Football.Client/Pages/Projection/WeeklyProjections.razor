@page "/WeeklyProjections"
<PageTitle>Weekly Projections</PageTitle>

@using Football.Client.Helpers;
@using Football.Client.Interfaces;
@using Football.Shared.Models.Projection;

@inject IProjectionService projectionService;
@inject IOperationsService operationsService;

<h4>Weekly Projections</h4>
@if (!settingsLoading){
<div>
    @foreach (var position in format.Positions(includeFlex: true))
    {

        <input type="radio" name="players" id=" @position" value="@position"
        @onchange="SetPosition"
               checked=@(Position.Equals(position,StringComparison.OrdinalIgnoreCase)) />
        <label for="@position ">@position</label>

    }
</div>
<div style="height:10px;font-size:1px;">&nbsp;</div>
<tr>
    <td>
<button class="button-22" role="button" @onclick="HandleSubmit">
    Submit
</button>
    </td>
        @if (players != null && players.Count > 0)
        {
            <td>&nbsp;</td>
            <td>
                <button class="button-22" role="button" @onclick="HandleConsensusProjectionsRefresh">
                    Refresh Consensus
                </button>
            </td>
        }
        @if (players != null && players.Count > 0 && !players.Any(p => p.CanDelete) && PositionEnum != "FLEX")
    {
        <td>&nbsp;</td>
        <td>
        <button class="button-22" role="button" @onclick="HandleUpload">
            Upload Projections
        </button>
        </td>
    }
    @if ((filter != null && filter.Count > 0 && projectionsExist != null && !projectionsExist.ProjectionExist)
    || (projectionsExist != null && projectionsExist.ProjectionExist && projectionsExist.Filters != null))
    {

        <td>
            <button type="button" class="btn btn-link" @onclick="() => HandleExpand()">
                <i class="oi oi-cog" />
            </button>
        </td>
    }
</tr>
}
@if (expandVariables && projectionsExist != null && projectionsExist.ProjectionExist && projectionsExist.Filters != null)
{
    <ul>
        @foreach (var f in projectionsExist.Filters)
        {
            <li>@f</li>
        }
    </ul>

}

@if (filter != null && expandVariables && !loading && projectionsExist != null && !projectionsExist.ProjectionExist)
{
    <div style="height:10px;font-size:1px;">&nbsp;</div>
    <div style="height:10px;font-size:1px;">&nbsp;</div>
    @foreach (var v in filter)
    {
        bool Checked = true;
        if (!selectedFilters.Contains(v))
        {
            Checked = false;
        }
        <tr>
            <td>@v</td>
            <td>
                <input type="checkbox" checked=@Checked
                       @onchange="eventArgs => { CheckboxClicked(v); }" />
            </td>
        </tr>
    }
    <div style="height:10px;font-size:1px;">&nbsp;</div>

}

@if (loading || settingsLoading)
{
    <div class="spinner"></div>
}

<div style="height:10px;font-size:1px;">&nbsp;</div>
@if (players != null && players.Count > 0)
{
    @if (count > 0)
    {
        <p>@count records added </p>
        count = 0;
    }
    @if (recordDeleted)
    {
        <text>Record deleted.</text>
    }
    <div style="height:10px;font-size:1px;">&nbsp;</div>

    <h5>Week @players.First().Week</h5>
    <div class="table_container">
        <table class="base_table">
            <thead>
                <tr>
                    <th></th>
                    <th>Name</th>
                    <th>Team</th>
                    <th>Opponent</th>
                    <th>Points</th>
                    <th>Consensus</th>
                    @if (players.First().CanDelete)
                    {
                        <th></th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var player in players)
                {
                    var logoPhotoPath = player.Team != null ? "https://localhost:7237/Logos/" + player.Team + ".png" : "https://localhost:7237/Logos/nfl.png";
                    var opponentPhotoPath = !string.IsNullOrEmpty(player.Opponent) ? "https://localhost:7237/Logos/" + player.Opponent + ".png" : "https://localhost:7237/Logos/nfl.png";
                    <tr>
                        <td>@GetRank(player)</td>
                        <td><a class="page-links" href="Players/@player.PlayerId"> @player.Name</a></td>
                        <td><img src="@logoPhotoPath" width="30" height="30"></td>                        
                        <td><img src="@opponentPhotoPath" width="30" height="30"></td>
                        <td>@Math.Round((double)player.ProjectedPoints,2)</td>
                        <td>@player.ConsensusProjection</td>
                        @if (player.CanDelete)
                        {
                            <td>
                                <button type="button" style="color:red" class="btn btn-link" @onclick="() => HandleDelete(player.PlayerId, player.Season, player.Week)">
                                    <i sytle="color:red" class="oi oi-x" />
                                </button>
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
@code {
    private bool shouldRender;
    protected override bool ShouldRender() => shouldRender;
    private bool badRequestError;
    private List<WeekProjectionModel>? players = new();
    private List<string>? filter = [];
    private List<string> selectedFilters = [];
    private WeeklyProjectionsExistModel? projectionsExist { get; set; }

    private string Position { get; set; } = "Quarterback";
    private string PositionEnum { get; set; } = "QB";
    private bool loading { get; set; }
    private int count = 0;
    private int consensusProjRefreshed { get; set; }
    private bool recordDeleted = false;
    private bool settingsLoading { get; set; }
    private bool expandVariables { get; set; } = false;

    private Formatter format = new();

    protected override async Task OnInitializedAsync()
    {
        settingsLoading = true;
        filter = await projectionService.GetWeeklyModelVariablesRequest("QB");
        if (filter != null)
        {
            foreach (var f in filter) selectedFilters.Add(f);

        }
        projectionsExist = await projectionService.GetWeeklyProjectionsExistRequest("QB");
        settingsLoading = false;
        shouldRender = true;
    }

    private async Task SetPosition(ChangeEventArgs args)
    {
        expandVariables = false;
        Position = args.Value.ToString();
        PositionEnum = format.SetPosition(Position);
        projectionsExist = null;
        recordDeleted = false;
        filter = await projectionService.GetWeeklyModelVariablesRequest(PositionEnum);
        selectedFilters = [];
        projectionsExist = await projectionService.GetWeeklyProjectionsExistRequest(PositionEnum);
        if (projectionsExist != null && projectionsExist.Filters.Count > 0)
        {
            foreach (var p in projectionsExist.Filters) selectedFilters.Add(p);
        }
        else if (filter != null)
        {
            foreach (var f in filter) selectedFilters.Add(f);

        }
        players?.Clear();
        shouldRender = true;
    }

    private async Task HandleSubmit()
    {
        loading = true;
        shouldRender = true;
        players?.Clear();
        PositionEnum = format.SetPosition(Position);
        players = (await projectionService.GetWeekProjectionsRequest(PositionEnum, selectedFilters)).OrderByDescending(p => p.ProjectedPoints).Where(p => p.ProjectedPoints > 0).ToList();
        loading = false;
        shouldRender = true;
    }

    private async Task HandleUpload()
    {
        loading = true;
        shouldRender = true;
        count = await projectionService.PostWeekProjectionRequest(PositionEnum, selectedFilters);
        projectionsExist = await projectionService.GetWeeklyProjectionsExistRequest(PositionEnum);
        await HandleSubmit();
        loading = false;
        shouldRender = true;
    }

    private async Task HandleDelete(int playerId, int season, int week)
    {
        loading = true;
        recordDeleted = await projectionService.DeleteWeekProjectionRequest(playerId, season, week);
        await HandleSubmit();
        shouldRender = true;
    }

    private async Task HandleConsensusProjectionsRefresh()
    {
        loading = true;
        shouldRender = true;
        consensusProjRefreshed = await operationsService.PutWeeklyConsensusProjectionsRequest(PositionEnum);
        await HandleSubmit();
        loading = false;
        shouldRender = true;
    }

    private void CheckboxClicked(string filter)
    {
        if (selectedFilters.Contains(filter)) selectedFilters.Remove(filter);
        else selectedFilters.Add(filter);
    }

    private void HandleExpand() => expandVariables = !expandVariables;

    private string GetHeader() => players.Any() ? "Week " + players.First().Week + " Projections" : string.Empty;
    private int GetRank(WeekProjectionModel projection) => players != null ? players.IndexOf(projection) + 1 : 0;

}


