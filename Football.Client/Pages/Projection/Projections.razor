@page "/Projections"
<PageTitle>Season Projections</PageTitle>

@using Football.Client.Helpers;
@using Football.Client.Interfaces;
@using Football.Shared.Models.Projection;

@inject IOperationsService operationsService;
@inject IProjectionService projectionService;

<h4>Season Projections</h4>
@if (!settingsLoading)
{
    <div>
        @foreach (var position in format.Positions(includeFlex: true, includeDST: false, includeK: false))
        {
            <input type="radio" name="players" id=" @position" value="@position" 
            @onchange= "SetPosition" 
            checked=@(Position.Equals(position,StringComparison.OrdinalIgnoreCase))
            />
            <label for="@position ">@position</label>

        }
    </div>

    <div style="height:10px;font-size:1px;">&nbsp;</div>
    <tr>
        <td>
            <button class="button-22" role="button" @onclick="HandleInput"> 
                Submit
            </button>
        </td>


        @if (players != null && players.Count > 0)
        {
            <td>&nbsp</td>
            <td>
                <button class="button-22" role="button" @onclick="HandleADPRefresh">
                    Update ADP
                </button>
            </td>
            <td>&nbsp</td>
            <td>
                <button class="button-22" role="button" @onclick="HandleConsensusProjectionsRefresh">
                    Update Consensus
                </button>
            </td>
            @if (!players.Any(p => p.CanDelete) && PositionEnum != "FLEX")
            {
                <td>&nbsp</td>
                <td>
                    <button class="button-22" role="button" @onclick="HandleUpload">
                        Upload Projections
                    </button>
                </td>
            }

        }

        @if ((filter != null && filter.Count > 0 && projectionsExist != null && !projectionsExist.ProjectionExist)
       || (projectionsExist != null && projectionsExist.ProjectionExist && projectionsExist.Filters != null))
        {

            <td>
                <button type="button" class="btn btn-link" @onclick="() => HandleExpand()">
                    <i class="oi oi-cog" />
                </button>
            </td>
        }
    </tr>
}

@if(expandVariables && projectionsExist != null && projectionsExist.ProjectionExist && projectionsExist.Filters != null)
{
    <ul>
        @foreach (var f in projectionsExist.Filters)
        {
            <li>@f</li>
        }
    </ul>

}

@if (filter != null && expandVariables && !loading && projectionsExist != null && !projectionsExist.ProjectionExist)
{
    <div style="height:10px;font-size:1px;">&nbsp;</div>
    <div style="height:10px;font-size:1px;">&nbsp;</div>
    @foreach (var v in filter)
    {
        bool Checked = true;
        if (!selectedFilters.Contains(v))
        {
            Checked = false;
        }
        <tr>
            <td>@v</td>
            <td>
                <input type="checkbox" checked=@Checked
                       @onchange="eventArgs => { CheckboxClicked(v); }" />
            </td>
        </tr>
    }
    <div style="height:10px;font-size:1px;">&nbsp;</div>

}

<div style="height:10px;font-size:1px;">&nbsp;</div>

@if(loading || settingsLoading)
{   
    <div class="spinner"></div>
}

@if(players != null && players.Count > 0)
{
    @if(count > 0)
    {
        <p>@count records added </p>
        count = 0;
    }
    @if (recordDeleted)
    {
        <text>Record deleted.</text>
    }
    <div style="height:10px;font-size:1px;">&nbsp;</div>
    @if (!loading){
    <div class="table_container">
        <table class="base_table">
            <thead>
                <tr>
                    @if (!sort.IsSortedAscending)
                    {
                        <th>Rank</th>
                    }                    
                    <th>Name</th>
                    <th>Team</th>
                    <th>
                        <span class="sort-link" onclick="@(() => SetTable("ProjectedPoints"))">Total Points</span>
                        <span class="oi @(sort.GetSortStyle("ProjectedPoints"))"></span>
                    </th>
                    <th>PPG</th>
                    <th>Games</th>
                    <th>
                        <span class="sort-link" onclick="@(() => SetTable("AdjustedProjectedPoints"))">Adjusted Total</span>
                        <span class="oi @(sort.GetSortStyle("AdjustedProjectedPoints"))"></span>
                    </th>
                    @if (players.Any(p => p.SeasonProjectionError != null))
                    {
                        <th>ActualTotal</th>
                        <th>ActualPPG</th>
                        <th>TotalError</th>
                        <th>PPGError</th>
                    }
                    else
                    {
                        <th>ADP</th>
                        <th>Consensus</th>
                    }
                    @if (players.Any(p => p.CanDelete))
                    {
                        <th></th>                        
                    }

                </tr>
        </thead>
        <tbody>
        @foreach (var p in players)
        {  
             var logoPhotoPath = p.Team != string.Empty ? "https://localhost:7237/Logos/" + p.Team + ".png" : "https://localhost:7237/Logos/nfl.png";
             var sa = p.SeasonProjectionError;
             var showRank = !sort.IsSortedAscending;
             var rank = @format.Rank(players, p);

            <tr>
            @if(showRank)
            {
                <td>@rank</td>
            }
            <td><a class = "page-links" href="Players/@p.PlayerId"> @p.Name</a></td>
            <td><img src="@logoPhotoPath" width="30" height="30"></td>
            <td>@Math.Round((double)p.ProjectedPoints,2)</td>
            <td>@Math.Round((double)p.ProjectedPoints/17,2)</td>
            <td>@Math.Round(17 - (double)p.AvgerageGamesMissed)</td>
            <td>@Math.Round((double)p.AdjustedProjectedPoints, 2)</td>
             @if (sa != null)
             {
                <td>@Math.Round(sa.TotalFantasy, 2)</td>
                <td>@Math.Round(sa.TotalFantasy / sa.WeeksPlayed, 2)</td>
                <td>@Math.Round(sa.TotalFantasy - sa.SeasonFantasyProjection, 2)</td>
                            <td>@Math.Round((sa.SeasonFantasyProjection / 17) - (sa.TotalFantasy / sa.WeeksPlayed), 2)</td>
             }
             else {
                    if (Position == "Flex")
                    {
                      <td>@p.OverallADP</td>
                    }
                    else
                    {
                      <td>@p.PositionalADP 
                      @if(showRank)
                      {
                         var diff = @Math.Round(p.PositionalADP - rank);
                         <b><text style="@format.AdpDiffColor(diff)"> (@diff.ToString())</text></b>
                      }
                      </td>
                    }
                    <td>@p.ConsensusProjection</td>
             }
             @if (p.CanDelete)
             {
                <td>
                <button type="button" style="color:red" class="btn btn-link" @onclick="() => HandleDelete(p.PlayerId, p.Season)"> <i sytle="color:red" class="oi oi-x" /></button>
                </td>
             }
            </tr>
        }
        </tbody>
    </table>
    </div>
    }
}
@code {
    private string Position { get; set; } = "Quarterback";
    private string PositionEnum { get; set; } = "QB";

    private List<SeasonProjectionModel>? players = [];
    private List<string>? filter = [];
    private List<string> selectedFilters = [];
    private SeasonProjectionsExistModel? projectionsExist { get; set; }

    private bool shouldRender;
    private int count = 0;
    private bool loading { get; set; }
    private bool settingsLoading { get; set; }
    public bool seasonOver { get; set; } = false;
    private bool recordDeleted = false;
    private int adpRefreshed { get; set; }
    private int consensusProjRefreshed { get; set; }
    private bool expandVariables { get; set; } = false;

    private Formatter format = new();
    private TableSort sort = new();

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        settingsLoading = true;        
        filter = await projectionService.GetSeasonModelVariablesRequest("QB");
        if (filter != null)
        {
            foreach (var f in filter) selectedFilters.Add(f);  

        }
        projectionsExist = await projectionService.GetSeasonProjectionsExistRequest("QB");
        settingsLoading = false;
        shouldRender = true;
    }

    private async Task SetPosition(ChangeEventArgs args)
    {
        expandVariables = false;
        shouldRender = true;
        projectionsExist = null;
        Position = args.Value.ToString();
        PositionEnum = format.SetPosition(Position);       
        filter = await projectionService.GetSeasonModelVariablesRequest(PositionEnum);
        selectedFilters = [];
        projectionsExist = await projectionService.GetSeasonProjectionsExistRequest(PositionEnum);
        if (projectionsExist != null && projectionsExist.Filters.Count > 0)
        {
            foreach (var p in projectionsExist.Filters) selectedFilters.Add(p);
        }
        else if (filter != null)
        {
            foreach (var f in filter) selectedFilters.Add(f);

        }
        recordDeleted = false;
        adpRefreshed = 0;
        consensusProjRefreshed = 0;
        players?.Clear();
        shouldRender = true;
    }

    private async Task HandleInput()
    {
        loading = true;
        shouldRender = true;
        players?.Clear();
        adpRefreshed = 0;
        consensusProjRefreshed = 0;
        players = await projectionService.GetSeasonProjectionsRequest(PositionEnum, selectedFilters);
        loading = false;
        shouldRender = true;
    }

    private async Task HandleDelete(int playerId, int season)
    {
        loading = true;
        shouldRender = true;
        recordDeleted = await projectionService.DeleteSeasonProjectionRequest(playerId, season);
        await HandleInput();
        loading = false;
        shouldRender = true;
    }

    private async Task HandleUpload()
    {
        loading = true;
        shouldRender = true;
        count = await projectionService.PostSeasonProjectionRequest(PositionEnum, selectedFilters);
        projectionsExist = await projectionService.GetSeasonProjectionsExistRequest(PositionEnum);
        await HandleInput();
        loading= false;
        shouldRender = true;
    }

    private async Task HandleADPRefresh()
    {
        loading = true;
        shouldRender = true;
        adpRefreshed = await operationsService.PutSeasonAdpRequest(PositionEnum);
        await HandleInput();
        loading = false;
        shouldRender = true;
    }

    private async Task HandleConsensusProjectionsRefresh()
    {
        loading = true;
        shouldRender = true;
        consensusProjRefreshed = await operationsService.PutSeasonConsensusProjectionsRequest(PositionEnum);
        await HandleInput();
        loading = false;
        shouldRender = true;
    }

    private void CheckboxClicked(string filter)
    {
        if (selectedFilters.Contains(filter)) selectedFilters.Remove(filter);
        else selectedFilters.Add(filter);
    }

    private void HandleExpand() => expandVariables = !expandVariables;

    private void SetTable(string columnName) => players = sort.SortTable<SeasonProjectionModel>(players, columnName);
}

