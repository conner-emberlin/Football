@using Football.Client.Helpers;
@using Football.Client.Interfaces;
@using Football.Client.Shared;
@using Football.Shared.Models.Fantasy;

@inject IFantasyService fantasyService;
@page "/Leaders/"

<h4>Fantasy Leaders</h4>
<EditForm model="this" OnSubmit="HandleInput">
<TextBoxWeek @bind-Week ="this.week"/>
<TextBoxPosition @bind-Position="this.position"/>
<TextBoxSeason @bind-Season="this.season" />
<button class="button-22" type="submit">Submit</button>
</EditForm>
<div style="height:10px;font-size:1px;">&nbsp;</div>

@if (loading)
{
    <div class="spinner"></div>
}

@if (currentLeaders != null && (!youTried || showAll) && !loading)
{
    var link = string.Format("/top-fantasy-performances/flex/{0}", currentLeaders.First().Season.ToString());
    <a class="page-links" href=@link> Top Weekly Performances</a>
    <div style="height:10px;font-size:1px;">&nbsp;</div>
    <div class="table_container">
        <table class="base_table">
            <thead>
                <tr>                 
                    <th></th>  
                    <th>Season</th>
                    <th>Name</th>
                    <th>Position</th>
                    <th>Games</th>                    
                    <th>Points</th>
                    <th>PPG</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var leader in currentLeaders)
                {
                    <tr>                      
                        <td>@form.Rank(currentLeaders, leader)</td>
                        <td>@leader.Season</td>
                        <td><a class="page-links" href="Players/@leader.PlayerId"> @leader.Name</a></td>
                        <td style="color:@form.PositionColor(leader.Position)"><b>@leader.Position</b></td>
                        <td>@leader.Games</td>                       
                        <td>@Math.Round(leader.FantasyPoints,2)</td>
                        <td>@Math.Round(leader.FantasyPointsPerGame, 2)</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else if(youTried && filterRunning && filteredLeaders != null && filteredLeaders.Any() && !loading)
{
    var link = string.Format("/top-fantasy-performances/{0}/{1}", position, filteredLeaders.First().Season);
    <a class="page-links" href=@link> Top Weekly Performances</a>
    <div style="height:10px;font-size:1px;">&nbsp;</div>
    <div class="table_container">
        <table class="base_table">
            <thead>
                <tr>
                    <th></th>    
                    <th>Season</th>
                    <th>Name</th>
                    <th>Position</th>
                    <th>Games</th>
                    <th>Points</th>
                    <th>PPG</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var leader in filteredLeaders)
                {
                    <tr>
                        <td>@form.Rank(filteredLeaders, leader)</td>   
                        <td>@leader.Season</td>
                        <td><a class="page-links" href="Players/@leader.PlayerId"> @leader.Name</a></td>
                        <td style="color:@form.PositionColor(leader.Position)"><b>@leader.Position</b></td>
                        <td>@leader.Games</td>
                        <td>@Math.Round(leader.FantasyPoints,2)</td>
                        <td>@Math.Round(leader.FantasyPointsPerGame, 2)</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else if(youTried && filterWeekly && weeklyResults != null && weeklyResults.Any() && !loading)
{
        <div class="table_container">
        <table class="base_table">
        <thead>
            <tr>
                <th></th>
                <th>Season</th>
                <th>Name</th>
                <th>Position</th>
                <th>Points</th>
            </tr>
        </thead>
        <tbody>
                @foreach (var result in weeklyResults)
                {
                    <tr>
                        <td>@form.Rank(weeklyResults, result)</td>
                        <td>@result.Season</td>
                        <td><a class="page-links" href="Players/@result.PlayerId"> @result.Name</a></td>
                        <td style="color:@form.PositionColor(result.Position)"><b>@result.Position</b></td>
                        <td>@Math.Round(result.FantasyPoints,2)</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    public string week { get; set; } = "";
    public string position { get; set; } = "";
    public string season { get; set; } = "";

    public List<WeeklyFantasyModel>? weeklyResults = new();
    public List<SeasonFantasyModel>? currentLeaders = new();
    public List<SeasonFantasyModel> filteredLeaders = new();

    public bool youTried = false;
    private bool shouldRender;
    private bool loading = false;
    private bool filterWeekly = false;
    private bool filterRunning = false;
    private bool showAll = false;

    public Formatter form = new();

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        currentLeaders = await fantasyService.GetSeasonTotalsRequest();
        loading = false;
        shouldRender = true;
    }

    public async Task HandleInput()
    {
        loading = true;
        youTried = true;
        filterRunning = false;
        filterWeekly = false;
        showAll = false;

        if (!string.IsNullOrEmpty(week))
        {
            filterWeekly = true;
            weeklyResults = (await fantasyService.GetWeeklyFantasyRequest(week, season)).OrderByDescending(p => p.FantasyPoints).ToList();
            weeklyResults = !string.IsNullOrEmpty(position) ? weeklyResults.Where(w => w.Position.ToLower() == position.Trim().ToLower()).ToList() : weeklyResults;
        }
        else if(string.IsNullOrEmpty(week) && !string.IsNullOrEmpty(position))
        {
            filterRunning = true;
            currentLeaders = await fantasyService.GetSeasonTotalsRequest(season);
            filteredLeaders = currentLeaders.Where(c => c.Position.ToLower() == position.ToLower()).ToList();
        }
        else
        {
            currentLeaders = (await fantasyService.GetSeasonTotalsRequest(season)).OrderByDescending(s => s.FantasyPoints).ToList();
            showAll = true;
        }

        loading = false;
        shouldRender = true;
    } 
}
