@page "/Players/{id?}"
<PageTitle>Players</PageTitle>
@using Football.Client.Helpers;
@using Football.Client.Interfaces;
@using Football.Client.Shared;
@using Football.Shared.Models.Players;

@inject IPlayersService playersService;
@inject NavigationManager NavigationManager

@if (players.Any())
{
    <div class="autocomplete w-25">
        <input @bind=selectedPlayer @oninput=HandleInput class="form-control filter" placeholder="Player Name..."/>
        @if (filteredPlayers is not null)
        {
            <ul class="options">
                @if (filteredPlayers.Any())
                {
                    @foreach (var p in filteredPlayers)
                    {
                        <li class="option" @onclick=@(_ => SelectPlayer(p.PlayerId))>
                            <span class="option-text">@p.Name</span>
                        </li>
                    }
                }
                else
                {
                    <li class="disabled option">No results</li>
                }
            </ul>
        }
    </div>
}

@if (loading)
{
    <div style="height:10px;font-size:1px;">&nbsp;</div>
    <div style="height:10px;font-size:1px;">&nbsp;</div>
    <div class="spinner"></div>
}
else if (!loading && !playerSelected)
{
    <div style="height:10px;font-size:1px;">&nbsp;</div>
    <div style="height:10px;font-size:1px;">&nbsp;</div>

    <tr>
        <td>
    <button class="button-22" role="button" @onclick="@(()=>NavigationManager.NavigateTo("/ManagePlayers"))">
        Manage Players
    </button>
    </td>
    <td>&nbsp;</td>
    <td>
    <button class="button-22" role="button" @onclick="@(()=>NavigationManager.NavigateTo("/Injuries"))">
        Manage Injuries
    </button>
        </td>
    </tr>
}
@if(!playerSelected && showTrending && trendingPlayers != null)
{
    <div style="height:10px;font-size:1px;">&nbsp;</div>
    <div style="height:10px;font-size:1px;">&nbsp;</div>
    <h5>Trending Players</h5>
    <div class="table_container">
        <table class="base_table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Team</th>
                    <th>Position</th>
                    <th>Adds</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var t in trendingPlayers)
                {
                    var logoPhotoPath = t.Team != string.Empty ?
                    "https://localhost:7237/Logos/" + t.Team + ".png"
                    : "https://localhost:7237/Logos/nfl.png";

                    <tr>
                        <td>@t.Name</td>
                        <td><img src="@logoPhotoPath" width="30" height="30"></td>
                        <td><b style="color:@form.PositionColor(t.Position)">@t.Position</b></td>
                        <td>@t.Adds</td>
                    </tr>
                }

            </tbody>
        </table>
    </div>

} 
<div style="height:10px;font-size:1px;">&nbsp;</div>
@if(playerSelected && playerId > 0 && playerData != null)
{
    var photoPath = "https://localhost:7237/PlayerPhotos/" + playerId + ".png";
    <div>
        <img src="@photoPath" width="100" onerror="this.src = 'https://localhost:7237/PlayerPhotos/gen.png'">
    </div>
    <div>
       <b>@playerData.Name</b> 
    </div>
    @if(!string.IsNullOrEmpty(playerData.Team))
    {
        <div><b>@playerData.Team</b> <b>&#x2022;</b>  <b style="color:@form.PositionColor(@playerData.Position)">@playerData.Position</b> </div>
    }
    else
    {
        <div><b>@playerData.Position</b> </div>
    }

    var season = playerData.WeeklyDataFromPastSeason && playerData.WeeklyData.Count > 0 ? string.Format("({0})", playerData.WeeklyData.First().Season) : string.Empty;
    <div> <b style="color:@form.PositionColor(playerData.Position)">@playerData.Position</b> #@playerData.PositionRank <b>&#x2022;</b> #@playerData.OverallRank Overall <b>&#x2022;</b> Fpts: @playerData.RunningFantasyTotal <b>@season </b></div>
    @if (playerData.Schedule.Any())
    {
        <div class="parent">
            @foreach (var s in playerData.Schedule.Take(10))
            {
                var logoPhotoPath = "https://localhost:7237/Logos/" + s.OpposingTeam + ".png";
                <div class="child">
                        <div>Wk @s.Week vs @s.OpposingTeam </div>
                    <div style="text-align: center;">  <img src="@logoPhotoPath" width="30" height="30"></div>
                </div>
        }
        </div>
    }
    <div style="height:10px;font-size:1px;">&nbsp;</div>
    @if(playerData.Position == "QB")
    {
        @if (playerData.WeeklyData.Any())
        {
            <div class="table_container">
                <table class="base_table">
                    <thead>
                        <tr>
                            <th>Season</th>
                            <th>Week</th>
                            <th>Comp</th>
                            <th>Att</th>
                            <th>Yd</th>
                            <th>TD</th>
                            <th>Int</th>
                            <th>Sck</th>
                            <th>RAtt</th>
                            <th>RYds</th>
                            <th>RTd</th>
                            <th>Fum</th>
                            <th>Fpts</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var stat in playerData.WeeklyData)
                        {
                            <tr>
                                <td>@stat.Season</td>
                                <td>@stat.Week</td>
                                <td>@stat.Completions</td>
                                <td>@stat.Attempts</td>
                                <td>@stat.PassingYards</td>
                                <td>@stat.PassingTouchdowns</td>
                                <td>@stat.Interceptions</td>
                                <td>@stat.Sacks</td>
                                <td>@stat.RushingAttempts</td>
                                <td>@stat.RushingYards</td>
                                <td>@stat.RushingTouchdowns</td>
                                <td>@stat.Fumbles</td>
                                <td>@Math.Round(playerData.WeeklyFantasy.Where(s => s.Week == stat.Week).First().FantasyPoints, 2)</td>
                            </tr>
                        }
                        <tr>
                            <td><b>Total</b></td>
                            <td>-</td>
                            <td>@playerData.WeeklyData.Sum(w => w.Completions)</td>
                            <td>@playerData.WeeklyData.Sum(w => w.Attempts)</td>
                            <td>@playerData.WeeklyData.Sum(w => w.PassingYards)</td>
                            <td>@playerData.WeeklyData.Sum(w => w.PassingTouchdowns)</td>
                            <td>@playerData.WeeklyData.Sum(w => w.Interceptions)</td>
                            <td>@playerData.WeeklyData.Sum(w => w.Sacks)</td>
                            <td>@playerData.WeeklyData.Sum(w => w.RushingAttempts)</td>
                            <td>@playerData.WeeklyData.Sum(w => w.RushingYards)</td>
                            <td>@playerData.WeeklyData.Sum(w => w.RushingTouchdowns)</td>
                            <td>@playerData.WeeklyData.Sum(w => w.Fumbles)</td>
                            <td>@Math.Round(playerData.WeeklyFantasy.Sum(w => w.FantasyPoints),2)</td>
                        </tr>
                        <tr>
                            <td><b>Avg</b></td>
                            <td>-</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.Completions))</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.Attempts) )</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.PassingYards) )</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.PassingTouchdowns) )</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.Interceptions))</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.Sacks))</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.RushingAttempts))</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.RushingYards))</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.RushingTouchdowns))</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.Fumbles))</td>
                            <td>@Math.Round(playerData.WeeklyFantasy.Average(w => w.FantasyPoints), 2)</td>
                        </tr>
                        <tr>
                            <td><b>Pace</b></td>
                            <td>-</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.Completions)*17)</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.Attempts)*17)</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.PassingYards)*17)</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.PassingTouchdowns)*17)</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.Interceptions)*17)</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.Sacks)*17)</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.RushingAttempts)*17)</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.RushingYards)*17)</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.RushingTouchdowns)*17)</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.Fumbles)*17)</td>
                            <td>@Math.Round(playerData.WeeklyFantasy.Average(w => w.FantasyPoints) * 17,2)</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        }
        @if (playerData.SeasonData.Any())
        {
            <div class="table_container">
                <table class="base_table">
                    <thead>
                        <tr>
                            <th>Season</th>
                            <th>Games</th>
                            <th>Comp</th>
                            <th>Att</th>
                            <th>Yd</th>
                            <th>TD</th>
                            <th>Int</th>
                            <th>Sck</th>
                            <th>RAtt</th>
                            <th>RYds</th>
                            <th>RTd</th>
                            <th>Fum</th>
                            <th>Fpts</th>
                            <th>FPPG</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var stat in playerData.SeasonData)
                        {
                            <tr>
                                <td>@stat.Season</td>
                                <td>@stat.Games</td>
                                <td>@stat.Completions</td>
                                <td>@stat.Attempts</td>
                                <td>@stat.PassingYards</td>
                                <td>@stat.PassingTouchdowns</td>
                                <td>@stat.Interceptions</td>
                                <td>@stat.Sacks</td>
                                <td>@stat.RushingAttempts</td>
                                <td>@stat.RushingYards</td>
                                <td>@stat.RushingTouchdowns</td>
                                <td>@stat.Fumbles</td>
                                <td>@Math.Round(playerData.SeasonFantasy.Where(s => s.Season == stat.Season).First().FantasyPoints, 2)</td>
                                <td>@Math.Round(playerData.SeasonFantasy.Where(s => s.Season == stat.Season).First().FantasyPointsPerGame, 2)</td>
                            </tr>
                        }

                    </tbody>
            </table>
        </div>
        }
    }

    else if(playerData.Position == "RB")
    {
        @if (playerData.WeeklyData.Any())
        {
            <div class="table_container">
                <table class="base_table">
                    <thead>
                        <tr>
                            <th>Season</th>
                            <th>Week</th>
                            <th>Att</th>
                            <th>Yds</th>
                            <th>TD</th>
                            <th>Rec</th>
                            <th>Tgt</th>
                            <th>RecYds</th>
                            <th>RecTD</th>
                            <th>Fum</th>
                            <th>Fpts</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var stat in playerData.WeeklyData)
                        {
                            <tr>
                                <td>@stat.Season</td>
                                <td>@stat.Week</td>
                                <td>@stat.RushingAttempts</td>
                                <td>@stat.RushingYards</td>
                                <td>@stat.RushingTouchdowns</td>
                                <td>@stat.Receptions</td>
                                <td>@stat.Targets</td>
                                <td>@stat.ReceivingYards</td>
                                <td>@stat.ReceivingTouchdowns</td>
                                <td>@stat.Fumbles</td>
                                <td>@Math.Round(playerData.WeeklyFantasy.Where(s => s.Week == stat.Week).First().FantasyPoints, 2)</td>
                            </tr>
                        }
                        <tr>
                            <td><b>Total</b></td>
                            <td>-</td>
                            <td>@playerData.WeeklyData.Sum(w => w.RushingAttempts)</td>
                            <td>@playerData.WeeklyData.Sum(w => w.RushingYards)</td>
                            <td>@playerData.WeeklyData.Sum(w => w.RushingTouchdowns)</td>
                            <td>@playerData.WeeklyData.Sum(w => w.Receptions)</td>
                            <td>@playerData.WeeklyData.Sum(w => w.Targets)</td>
                            <td>@playerData.WeeklyData.Sum(w => w.ReceivingYards)</td>
                            <td>@playerData.WeeklyData.Sum(w => w.ReceivingTouchdowns)</td>
                            <td>@playerData.WeeklyData.Sum(w => w.Fumbles)</td>
                            <td>@Math.Round(playerData.WeeklyFantasy.Sum(w => w.FantasyPoints),2)</td>
                        </tr>
                        <tr>
                            <td><b>Avg</b></td>
                            <td>-</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.RushingAttempts) )</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.RushingYards) )</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.RushingTouchdowns) )</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.Receptions))</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.Targets) )</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.ReceivingYards) )</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.ReceivingTouchdowns))</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.Fumbles) )</td>
                            <td>@Math.Round(playerData.WeeklyFantasy.Average(w => w.FantasyPoints), 2)</td>
                        </tr>
                        <tr>
                            <td><b>Pace</b></td>
                            <td>-</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.RushingAttempts)*17)</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.RushingYards)*17)</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.RushingTouchdowns)*17)</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.Receptions)*17)</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.Targets)*17)</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.ReceivingYards)*17)</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.ReceivingTouchdowns)*17)</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.Fumbles)*17)</td>
                            <td>@Math.Round(playerData.WeeklyFantasy.Average(w => w.FantasyPoints) * 17,2)</td>
                        </tr>
                    </tbody>
                </table>
            </div>             
        }
        @if (playerData.SeasonData.Any())
        {
            <div class="table_container">
                <table class="base_table">
                    <thead>
                        <tr>
                            <th>Season</th>
                            <th>Games</th>
                            <th>Att</th>
                            <th>Yds</th>
                            <th>TD</th>
                            <th>Rec</th>
                            <th>Tgt</th>
                            <th>RecYds</th>
                            <th>RecTD</th>
                            <th>Fum</th>
                            <th>Fpts</th>
                            <th>FPPG</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var stat in playerData.SeasonData)
                        {
                            <tr>
                                <td>@stat.Season</td>
                                <td>@stat.Games</td>
                                <td>@stat.RushingAttempts</td>
                                <td>@stat.RushingYards</td>
                                <td>@stat.RushingTouchdowns</td>
                                <td>@stat.Receptions</td>
                                <td>@stat.Targets</td>
                                <td>@stat.ReceivingYards</td>
                                <td>@stat.ReceivingTouchdowns</td>
                                <td>@stat.Fumbles</td>
                                <td>@Math.Round(playerData.SeasonFantasy.Where(s => s.Season == stat.Season).First().FantasyPoints, 2)</td>
                                <td>@Math.Round(playerData.SeasonFantasy.Where(s => s.Season == stat.Season).First().FantasyPointsPerGame, 2)</td>
                            </tr>
                        }
                    </tbody>
            </table>
        </div>
        }
    }

    else if(playerData.Position == "WR")
    {
        @if (playerData.WeeklyData.Any())
        {
            <div class="table_container">
                <table class="base_table">
                    <thead>
                        <tr>
                            <th>Season</th>
                            <th>Week</th>
                            <th>Rec</th>
                            <th>Tgt</th>
                            <th>Yds</th>
                            <th>Lng</th>
                            <th>TD</th>
                            <th>RAtt</th>
                            <th>RYds</th>
                            <th>RTD</th>
                            <th>Fum</th>
                            <th>Fpts</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var stat in playerData.WeeklyData)
                        {
                            <tr>
                                <td>@stat.Season</td>
                                <td>@stat.Week</td>
                                <td>@stat.Receptions</td>
                                <td>@stat.Targets</td>
                                <td>@stat.ReceivingYards</td>
                                <td>@stat.Long</td>
                                <td>@stat.ReceivingTouchdowns</td>
                                <td>@stat.RushingAttempts</td>
                                <td>@stat.RushingYards</td>
                                <td>@stat.RushingTouchdowns</td>
                                <td>@stat.Fumbles</td>
                                <td>@Math.Round(playerData.WeeklyFantasy.Where(s => s.Week == stat.Week).First().FantasyPoints,2)</td>
                            </tr>
                        }
                        <tr>
                            <td><b>Total</b></td>
                            <td>-</td>
                            <td>@playerData.WeeklyData.Sum(w => w.Receptions)</td>
                            <td>@playerData.WeeklyData.Sum(w => w.Targets)</td>
                            <td>@playerData.WeeklyData.Sum(w => w.ReceivingYards)</td>
                            <td>-</td>
                            <td>@playerData.WeeklyData.Sum(w => w.ReceivingTouchdowns)</td>
                            <td>@playerData.WeeklyData.Sum(w => w.RushingAttempts)</td>
                            <td>@playerData.WeeklyData.Sum(w => w.RushingYards)</td>
                            <td>@playerData.WeeklyData.Sum(w => w.RushingTouchdowns)</td>
                            <td>@playerData.WeeklyData.Sum(w => w.Fumbles)</td>
                            <td>@Math.Round(playerData.WeeklyFantasy.Sum(w => w.FantasyPoints),2)</td>
                        </tr>
                        <tr>
                            <td><b>Avg</b></td>
                            <td>-</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.Receptions) )</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.Targets))</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.ReceivingYards) )</td>
                            <td>-</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.ReceivingTouchdowns) )</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.RushingAttempts) )</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.RushingYards))</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.RushingTouchdowns) )</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.Fumbles) )</td>
                            <td>@Math.Round(playerData.WeeklyFantasy.Average(w => w.FantasyPoints), 2)</td>
                        </tr>
                        <tr>
                            <td><b>Pace</b></td>
                            <td>-</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.Receptions)*17)</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.Targets)*17)</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.ReceivingYards)*17)</td>
                            <td>-</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.ReceivingTouchdowns)*17)</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.RushingAttempts)*17)</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.RushingYards)*17)</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.RushingTouchdowns)*17)</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.Fumbles)*17)</td>
                            <td>@Math.Round(playerData.WeeklyFantasy.Average(w => w.FantasyPoints) * 17,2)</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        }
        @if (playerData.SeasonData.Any())
        {
            <div class="table_container">
                <table class="base_table">
                    <thead>
                        <tr>
                            <th>Season</th>
                            <th>Games</th>
                            <th>Rec</th>
                            <th>Tgt</th>
                            <th>Yds</th>
                            <th>Lng</th>
                            <th>TD</th>
                            <th>RAtt</th>
                            <th>RYds</th>
                            <th>RTD</th>
                            <th>Fum</th>
                            <th>Fpts</th>
                            <th>FPPG</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var stat in playerData.SeasonData)
                        {
                            <tr>
                                <td>@stat.Season</td>
                                <td>@stat.Games</td>
                                <td>@stat.Receptions</td>
                                <td>@stat.Targets</td>
                                <td>@stat.ReceivingYards</td>
                                <td>@stat.Long</td>
                                <td>@stat.ReceivingTouchdowns</td>
                                <td>@stat.RushingAttempts</td>
                                <td>@stat.RushingYards</td>
                                <td>@stat.RushingTouchdowns</td>
                                <td>@stat.Fumbles</td>
                                <td>@Math.Round(playerData.SeasonFantasy.Where(s => s.Season == stat.Season).First().FantasyPoints, 2)</td>
                                <td>@Math.Round(playerData.SeasonFantasy.Where(s => s.Season == stat.Season).First().FantasyPointsPerGame, 2)</td>
                            </tr>
                        }
                    </tbody>
            </table>
        </div>
        }
    }

    else if(playerData.Position == "TE")
    {
        @if (playerData.WeeklyData.Any())
        {
            <div class="table_container">
                <table class="base_table">
                    <thead>
                        <tr>
                            <th>Season</th>
                            <th>Week</th>
                            <th>Rec</th>
                            <th>Tgt</th>
                            <th>Yds</th>
                            <th>Lng</th>
                            <th>TD</th>
                            <th>RAtt</th>
                            <th>RYds</th>
                            <th>RTD</th>
                            <th>Fum</th>
                            <th>Fpts</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var stat in playerData.WeeklyData)
                        {
                            <tr>
                                <td>@stat.Season</td>
                                <td>@stat.Week</td>
                                <td>@stat.Receptions</td>
                                <td>@stat.Targets</td>
                                <td>@stat.ReceivingYards</td>
                                <td>@stat.Long</td>
                                <td>@stat.ReceivingTouchdowns</td>
                                <td>@stat.RushingAttempts</td>
                                <td>@stat.RushingYards</td>
                                <td>@stat.RushingTouchdowns</td>
                                <td>@stat.Fumbles</td>
                                <td>@Math.Round(playerData.WeeklyFantasy.Where(s => s.Week == stat.Week).First().FantasyPoints,2)</td>
                            </tr>
                        }
                        <tr>
                            <td><b>Total</b></td>
                            <td>-</td>
                            <td>@playerData.WeeklyData.Sum(w => w.Receptions)</td>
                            <td>@playerData.WeeklyData.Sum(w => w.Targets)</td>
                            <td>@playerData.WeeklyData.Sum(w => w.ReceivingYards)</td>
                            <td>-</td>
                            <td>@playerData.WeeklyData.Sum(w => w.ReceivingTouchdowns)</td>
                            <td>@playerData.WeeklyData.Sum(w => w.RushingAttempts)</td>
                            <td>@playerData.WeeklyData.Sum(w => w.RushingYards)</td>
                            <td>@playerData.WeeklyData.Sum(w => w.RushingTouchdowns)</td>
                            <td>@playerData.WeeklyData.Sum(w => w.Fumbles)</td>
                            <td>@Math.Round(playerData.WeeklyFantasy.Sum(w => w.FantasyPoints),2)</td>
                        </tr>
                        <tr>
                            <td><b>Avg</b></td>
                            <td>-</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.Receptions) )</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.Targets))</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.ReceivingYards))</td>
                            <td>-</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.ReceivingTouchdowns) )</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.RushingAttempts) )</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.RushingYards) )</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.RushingTouchdowns))</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.Fumbles) )</td>
                            <td>@Math.Round(playerData.WeeklyFantasy.Average(w => w.FantasyPoints), 2)</td>
                        </tr>
                        <tr>
                            <td><b>Pace</b></td>
                            <td>-</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.Receptions)*17)</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.Targets)*17)</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.ReceivingYards)*17)</td>
                            <td>-</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.ReceivingTouchdowns)*17)</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.RushingAttempts)*17)</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.RushingYards)*17)</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.RushingTouchdowns)*17)</td>
                            <td>@Math.Round(playerData.WeeklyData.Average(w => w.Fumbles)*17)</td>
                            <td>@Math.Round(playerData.WeeklyFantasy.Average(w => w.FantasyPoints) * 17,2)</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        }
        @if (playerData.SeasonData.Any())
        {
            <div class="table_container">
                <table class="base_table">
                    <thead>
                        <tr>
                            <th>Season</th>
                            <th>Games</th>
                            <th>Rec</th>
                            <th>Tgt</th>
                            <th>Yds</th>
                            <th>Lng</th>
                            <th>TD</th>
                            <th>RAtt</th>
                            <th>RYds</th>
                            <th>RTD</th>
                            <th>Fum</th>
                            <th>Fpts</th>
                            <th>FPPG</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var stat in playerData.SeasonData)
                        {
                            <tr>
                                <td>@stat.Season</td>
                                <td>@stat.Games</td>
                                <td>@stat.Receptions</td>
                                <td>@stat.Targets</td>
                                <td>@stat.ReceivingYards</td>
                                <td>@stat.Long</td>
                                <td>@stat.ReceivingTouchdowns</td>
                                <td>@stat.RushingAttempts</td>
                                <td>@stat.RushingYards</td>
                                <td>@stat.RushingTouchdowns</td>
                                <td>@stat.Fumbles</td>
                                <td>@Math.Round(playerData.SeasonFantasy.Where(s => s.Season == stat.Season).First().FantasyPoints, 2)</td>
                                <td>@Math.Round(playerData.SeasonFantasy.Where(s => s.Season == stat.Season).First().FantasyPointsPerGame, 2)</td>
                            </tr>
                        }
                    </tbody>
            </table>
        </div>
        }
    }
    else if (playerData.Position == "DST")
    {
        @if (playerData.WeeklyData.Any())
        {
            <div class="table_container">
                <table class="base_table">
                    <thead>
                        <tr>
                            <th>Season</th>
                            <th>Week</th>
                            <th>Sacks</th>
                            <th>Ints</th>
                            <th>FumRecvd</th>
                            <th>ForcedFum</th>
                            <th>DefTD</th>
                            <th>Safety</th>
                            <th>SpecTD</th>
                            <th>Fpts</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var stat in playerData.WeeklyData)
                        {
                            <tr>
                                <td>@stat.Season</td>
                                <td>@stat.Week</td>
                                <td>@stat.Sacks</td>
                                <td>@stat.DefensiveInterceptions</td>
                                <td>@stat.FumblesRecovered</td>
                                <td>@stat.ForcedFumbles</td>
                                <td>@stat.DefensiveTouchdowns</td>
                                <td>@stat.DefensiveSafties</td>
                                <td>@stat.SpecialTeamsTouchdowns</td>
                                <td>@Math.Round(playerData.WeeklyFantasy.Where(s => s.Week == stat.Week).First().FantasyPoints,2)</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        @if (playerData.SeasonData.Any())
        {
            <div class="table_container">
                <table class="base_table">
                    <thead>
                        <tr>
                            <th>Season</th>
                            <th>Games</th>
                            <th>Sacks</th>
                            <th>Ints</th>
                            <th>FumRecvd</th>
                            <th>ForcedFum</th>
                            <th>DefTD</th>
                            <th>Safety</th>
                            <th>SpecTD</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var stat in playerData.SeasonData)
                        {
                            <tr>
                                <td>@stat.Season</td>
                                <td>@stat.Games</td>
                                <td>@stat.Sacks</td>
                                <td>@stat.DefensiveInterceptions</td>
                                <td>@stat.FumblesRecovered</td>
                                <td>@stat.ForcedFumbles</td>
                                <td>@stat.DefensiveTouchdowns</td>
                                <td>@stat.DefensiveSafties</td>
                                <td>@stat.SpecialTeamsTouchdowns</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    }
    else if(playerData.Position == "K")
    {
        @if (playerData.WeeklyData.Count > 0)
        {
            <div class="table_container">
                <table class="base_table">
                    <thead>
                        <tr>
                            <th>Season</th>
                            <th>Week</th>
                            <th>FG</th>
                            <th>FGA</th>
                            <th>1-19</th>
                            <th>20-29</th>
                            <th>30-39</th>
                            <th>40-49</th>
                            <th>50+</th>
                            <th>XP</th>
                            <th>XPA</th>
                            <th>Fpts</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var stat in playerData.WeeklyData)
                        {
                            <tr>
                                <td>@stat.Season</td>
                                <td>@stat.Week</td>
                                <td>@stat.FieldGoals</td>
                                <td>@stat.FieldGoalAttempts</td>
                                <td>@stat.OneNineteen</td>
                                <td>@stat.TwentyTwentyNine</td>
                                <td>@stat.ThirtyThirtyNine</td>
                                <td>@stat.FourtyFourtyNine</td>
                                <td>@stat.Fifty</td>
                                <td>@stat.ExtraPoints</td>
                                <td>@stat.ExtraPointAttempts</td>
                                <td>@Math.Round(playerData.WeeklyFantasy.Where(s => s.Week == stat.Week).First().FantasyPoints, 2)</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    }
}
 
@code{
    [Parameter]
    public string id { get; set; } = "";


    private bool shouldRender;
    private bool loading { get; set; }
    private bool playerSelected = false;
    private string selectedPlayer { get; set; } = "";
    private int playerId { get; set; }
    private bool showTrending { get; set; } = false;

    private List<SimplePlayerModel>? players { get; set; } = new();
    private List<SimplePlayerModel>? filteredPlayers { get; set; }     
    private PlayerDataModel? playerData = new();   
    private List<TrendingPlayerModel>? trendingPlayers { get; set; } = new();

    private Formatter form = new();

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        shouldRender = true;
        players = (await playersService.GetSimplePlayersRequest()).OrderByDescending(p => p.Active).ThenBy(p => p.Name).ToList();
        if (!String.IsNullOrEmpty(id))
        {
            SelectPlayer(int.Parse(id));
            id = "";
        }
        else
        {
            showTrending = true;
            trendingPlayers = await playersService.GetTrendingPlayersRequest();
        }
        loading = false;
        shouldRender = true;
    }
    private void HandleInput(ChangeEventArgs e)
    {
        var filter = e.Value?.ToString();
        if (filter?.Length > 2) filteredPlayers = players.Where(p => p.Name.ToLower().Contains(filter.ToLower())).ToList();
        else filteredPlayers = null;
    }

    private async void SelectPlayer(int pid)
    {
        loading = true;
        showTrending = false;
        playerSelected = false;
        selectedPlayer = "";
        playerId = pid;

        playerData = await playersService.GetPlayerDataRequest(playerId);
        if (playerData != null) playerData.SeasonData = playerData.SeasonData.OrderByDescending(s => s.Season).ToList();
        playerSelected = true;
        selectedPlayer = playerData != null ? playerData.Name : string.Empty;
        filteredPlayers = null;
        loading = false;

        StateHasChanged();
    }
}

