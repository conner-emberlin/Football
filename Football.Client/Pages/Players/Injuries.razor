@page "/Injuries"

@using Football.Client.Helpers;
@using Football.Client.Interfaces;
@using Football.Client.Shared;
@using Football.Shared.Models.Players;

@inject IPlayersService playersService;

<h4>Injury Management</h4>

<div style="height:10px;font-size:1px;">&nbsp;</div>
<button class="button-22" role="button" @onclick="Add">
    New Injury
</button>

@if (loading)
{
    <div class="spinner"></div>
}

<div style="height:10px;font-size:1px;">&nbsp;</div>
@if (adding)
{
        <div class="autocomplete w-25">
        <input @bind=selectedPlayer @oninput=HandleInput class="form-control filter" placeholder="Player Name..."/>
        @if (filteredPlayers is not null)
        {
            <ul class="options">
                @if (filteredPlayers.Any())
                {
                    @foreach (var p in filteredPlayers)
                    {
                        <li class="option" @onclick=@(_ => SelectPlayer(p))>
                            <span class="option-text">@p.Name</span>
                        </li>
                    }
                }
                else
                {
                    <li class="disabled option">No results</li>
                }
            </ul>
        }        
        </div>
    <div style="height:10px;font-size:1px;">&nbsp;</div>
    <div style="height:10px;font-size:1px;">&nbsp;</div>

    @if (playerChosen)
    {
        <div class="table_container">
        <table class="base_table">
            <thead>
                <tr>                   
                    <th>Name</th>
                    <th>Season</th>
                    <th>Start Week</th>
                    <th>End Week</th>
                    <th>Description</th>
                    <th>Injured Games</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>@playerName</td>
                    <td>
                      <input type="text" class="form-control" placeholder="Season" @bind="@newInjury.Season" />
                    </td>
                    <td>
                      <input type="text" class="form-control" placeholder="Start Week" @bind="@newInjury.InjuryStartWeek" />
                    </td>
                    <td>
                      <input type="text" class="form-control" placeholder="End Week" @bind="@newInjury.InjuryEndWeek" />
                    </td>
                    <td>
                      <input type="text" class="form-control" placeholder="Desc" @bind="@newInjury.Description" />
                    </td>
                        <td>
                            <input type="text" class="form-control" placeholder="Games Injured" @bind="@newInjury.GamesPlayedInjured" />
                        </td>
                    <td>
                       <button type="button" class="btn btn-link" @onclick="() => CancellAdd()">
                          <i class="oi oi-circle-x" />
                       </button>
                       <button type="button" class="btn btn-link" @onclick="() => AddInjury(newInjury)">
                          <i class="oi oi-circle-check" />
                       </button>
                    </td>
                </tr>
            </tbody>
        </table>
        </div>

        @if (youTriedToAdd && injuryAdded > 0)
        {
            <text>Record added.</text>
        }
        else if (youTriedToAdd && injuryAdded == 0)
        {
            <text>Something went wrong.</text>
        }
    }

}
else if (filteredInjuryEdits.Count > 0)
{
    <EditForm model="this" OnSubmit="HandleSearch">
        <TextBoxName @bind-Value="this.Value" />
    </EditForm>
    <div class="table_container">
        <table class="base_table">
            <thead>
                <tr>                   
                    <th>Name</th>
                    <th>Position</th>
                    <th>Season</th>
                    <th>Start Week</th>
                    <th>End Week</th>
                    <th>Description</th>
                    <th>Games Injured</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var injury in filteredInjuryEdits)
                {
                    var pos = injury.Position;
                    if (injury.IsEditing)
                    {
                    <tr>
                        <td><a class="page-links" href="Players/@injury.PlayerId"> @injury.Name</a></td>
                        <td><b style="color:@form.PositionColor(pos)">@pos</b></td>
                            <td>@injury.Season</td>
                        <td>@injury.InjuryStartWeek</td>
                        <td>
                            <input type="text" class="form-control" placeholder="End Week" @bind="@injury.InjuryEndWeek"/>
                        </td>
                        <td>
                            <input type="text" class="form-control" placeholder="Desc" @bind="@injury.Description" />
                       </td>
                            <td>
                                <input type="text" class="form-control" placeholder="Games Injured" @bind="@injury.GamesPlayedInjured" />
                            </td>
                        <td>
                            <button style="color:red" type="button" class="btn btn-link" @onclick="() => EnableEditing(false, injury)">
                            <i class="oi oi-circle-x" />
                            </button>
                            <button style="color:green" type="button" class="btn btn-link" @onclick="() => UpdateInjury(injury)">
                            <i class="oi oi-circle-check" />
                            </button>
                        </td>

                     </tr>
                    }
                    else
                    {
                        <tr>
                        <td><a class="page-links" href="Players/@injury.PlayerId"> @injury.Name</a></td>
                            <td><b style="color:@form.PositionColor(pos)">@pos</b></td>
                            <td>@injury.Season</td>
                        <td>@injury.InjuryStartWeek</td>
                        <td>@FormatEndWeek(injury.InjuryEndWeek)</td>
                        <td>@injury.Description</td>
                        <td>@injury.GamesPlayedInjured</td>
                        <td>
                            <button type="button" class="btn btn-link" @onclick="() => EnableEditing(true, injury)">
                                <i class="oi oi-pencil" />
                            </button>
                        </td>
                    </tr>
                    }
                }
            </tbody>
        </table>
    </div>
}

@code {

    private bool badRequestError = false;
    private bool shouldRender;
    private bool loading = false;

    private bool adding = false;

    private List<PlayerInjuryModel>? injuries = new();
    private List<InjuryEdit> injuryEdits = new();
    private InSeasonInjuryModel newInjury { get; set; } = new();

    private List<SimplePlayerModel>? allPlayers = new();
    private List<SimplePlayerModel>? filteredPlayers { get; set; }
    private string selectedPlayer { get; set; } = "";
    private SimplePlayerModel playerSelected { get; set; } = new();
    private bool playerChosen { get; set; } = false;
    private string playerName { get; set; } = "";
    private string playerPosition { get; set; } = "";

    private bool youTriedToAdd { get; set; }
    private int injuryAdded { get; set; }

    private Formatter form = new();

    private List<InjuryEdit> filteredInjuryEdits = new();
    private string Value { get; set; } = "";

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        await GetInjuryEdits();
        loading = false;
        shouldRender = true;
    }

    private async Task GetInjuryEdits()
    {
        injuryEdits.Clear();
        filteredInjuryEdits.Clear();
        Value = string.Empty;
        injuries = await playersService.GetAllInSeasonInjuriesRequest();
        if (injuries != null && injuries.Count > 0)
        {
            injuryEdits = injuries.Select(i => new InjuryEdit
                {
                    Name = i.Name,
                    Position = i.Position,
                    Season = i.Season,
                    PlayerId = i.PlayerId,
                    InjuryId = i.InjuryId,
                    InjuryStartWeek = i.InjuryStartWeek,
                    InjuryEndWeek = i.InjuryEndWeek,
                    Description = i.Description,
                    GamesPlayedInjured = i.GamesPlayedInjured
                }).OrderBy(ie => ie.Name).ToList();

            injuryEdits.ForEach(i => i.IsEditing = false);
            filteredInjuryEdits.AddRange(injuryEdits);
        }
    }
    private async void Add()
    {
        adding = true;
        selectedPlayer = string.Empty;
        filteredPlayers = null;
        newInjury = new InSeasonInjuryModel();
        await GetPlayers();
        shouldRender = true;
    }

    private void SelectPlayer(SimplePlayerModel player)
    {
        selectedPlayer = "";
        playerChosen = true;
        playerSelected = player;
        playerName = player.Name;
        playerPosition = player.Position;
        newInjury.PlayerId = player.PlayerId;
        selectedPlayer = playerName;
        filteredPlayers = null;
        StateHasChanged();
    }

    private async Task UpdateInjury(InjuryEdit injuryEdit)
    {
        EnableEditing(false, injuryEdit);
        loading = true;

        var inSeasonInjury = new InSeasonInjuryModel
        {
            Season = injuryEdit.Season,
            InjuryId = injuryEdit.InjuryId,
            PlayerId = injuryEdit.PlayerId,
            InjuryStartWeek = injuryEdit.InjuryStartWeek,
            InjuryEndWeek = injuryEdit.InjuryEndWeek,
            Description = injuryEdit.Description,
            GamesPlayedInjured = injuryEdit.GamesPlayedInjured
        };

        var updated = await playersService.UpdateInSeasonInjuryRequest(inSeasonInjury);
        if (updated) await GetInjuryEdits();
        else badRequestError = true;

        loading = false;
        shouldRender = true;
    }
   
    private void HandleInput(ChangeEventArgs e)
    {
        var filter = e.Value?.ToString();
        if (filter?.Length > 2)
        {
            filteredPlayers = allPlayers.Where(p => p.Name.ToLower().Contains(filter.ToLower())).ToList();
        }
        else
        {
            filteredPlayers = null;
        }
    }

    private void CancellAdd()
    {
        adding = false;
        newInjury = new InSeasonInjuryModel();
        playerChosen = false;
        playerSelected = new SimplePlayerModel();
        playerName = string.Empty;
        playerPosition = string.Empty;
        shouldRender = true;
    }

    private async Task AddInjury(InSeasonInjuryModel injury)
    {
        adding = false;
        playerChosen = false;
        playerSelected = new SimplePlayerModel();
        playerName = string.Empty;
        playerPosition = string.Empty;
        injuryAdded = await playersService.PostInSeasonInjuryRequest(injury);
        await GetInjuryEdits();
    }

    private void HandleSearch()
    {
        filteredInjuryEdits.Clear();

        if (!string.IsNullOrEmpty(Value))
        {
            filteredInjuryEdits = injuryEdits.Where(m => m.Name.ToLower().Contains(Value.ToLower())).ToList();
            shouldRender = true;
        }
        else
        {
            filteredInjuryEdits.AddRange(injuryEdits);
        }
    }

    private async Task GetPlayers() => allPlayers = (await playersService.GetSimplePlayersRequest(activeOnly: true)).OrderByDescending(p => p.Active).ThenBy(p => p.Name).ToList();

    private string FormatEndWeek(int endWeek) => endWeek > 0 ? endWeek.ToString() : "-";

    private void EnableEditing(bool flag, InjuryEdit injuryEdit) => injuryEdit.IsEditing = flag;

    private class InjuryEdit : PlayerInjuryModel
    {
        public bool IsEditing { get; set; }
    }

}
