@page "/"
@using System.Text.Json
@using System.Text.Json.Serialization
@using Football.Client.Models;

@inject IHttpClientFactory clientFactory;
<PageTitle>Home</PageTitle>
<h4>NFL News</h4>

@if (loading)
{
    <div class="spinner"></div>
}

@if (!badRequestError && articles!= null)
{
    foreach(var article in articles)
    {
        <div>
        <a class="page-links" href="@article.links.web.href"> @article.headline </a>
        <p>@article.description</p>
            @if (article.images != null && article.images.Any())            
            {
            <img src="@article.images.First().url" height="200" />
            }
        <hr style="width:75%;text-align:left;margin-left:0">
        </div>
        <br/>
    }
}

@code{

    private bool shouldRender;
    protected override bool ShouldRender() => shouldRender;
    private bool badRequestError;

    private bool loading { get; set; }

    private EspnNews? root = new();
    private List<Article> articles = new();
    
    protected override async Task OnInitializedAsync()
    {
        loading = true;
        var request = new HttpRequestMessage(HttpMethod.Get, "https://site.api.espn.com/apis/site/v2/sports/football/nfl/news?limt=25");
        request.Headers.Add("Accept", "application/json");
        var client = clientFactory.CreateClient();
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            using var responseStream = await response.Content.ReadAsStreamAsync();
            root = await JsonSerializer.DeserializeAsync<EspnNews>(responseStream, options);
            articles = root != null ? root.articles : [];
        }
        else
        {
            badRequestError = true;
        }
        loading = false;
        shouldRender = true;
        
    }
    

}
